package com.webank.wecross.stub.bcos3.performance.hellowecross.proxy;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class WeCrossProxy extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "00600082015250565b6000616fe960118361645f565b9150616ff482616fb3565b601182019050919050565b7f22636f6d6d697454696d657374616d70223a0000000000000000000000000000600082015250565b600061703560128361645f565b915061704082616fff565b601282019050919050565b7f22726f6c6c6261636b54696d657374616d70223a000000000000000000000000600082015250565b600061708160148361645f565b915061708c8261704b565b601482019050919050565b7f2278615472616e73616374696f6e5374657073223a0000000000000000000000600082015250565b60006170cd60158361645f565b91506170d882617097565b601582019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b600061711960018361645f565b9150617124826170e3565b600182019050919050565b600061713a82616e14565b9150617146828b61663f565b915061715182616e60565b915061715c82616eac565b9150617168828a616552565b915061717382616e60565b915061717e82616ef8565b915061718a8289616552565b915061719582616e60565b91506171a082616f44565b91506171ac828861663f565b91506171b782616f90565b91506171c282616fdc565b91506171ce828761663f565b91506171d982616f90565b91506171e482617028565b91506171f0828661663f565b91506171fb82616f90565b915061720682617074565b9150617212828561663f565b915061721d82616f90565b9150617228826170c0565b9150617234828461663f565b915061723f8261710c565b91508190509998505050505050505050565b600061725c82615f19565b915061726783615f19565b92508282101561727a576172796166e9565b5b828203905092915050565b7f2274696d657374616d70223a0000000000000000000000000000000000000000600082015250565b60006172bb600c8361645f565b91506172c682617285565b600c82019050919050565b7f7d2c000000000000000000000000000000000000000000000000000000000000600082015250565b600061730760028361645f565b9150617312826172d1565b600282019050919050565b6000617329828961663f565b915061733482616e14565b9150617340828861663f565b915061734b82616e60565b915061735682616eac565b91506173628287616552565b915061736d82616e60565b915061737882616ef8565b91506173848286616552565b915061738f82616e60565b915061739a82616f44565b91506173a6828561663f565b91506173b182616f90565b91506173bc826172ae565b91506173c8828461663f565b91506173d3826172fa565b9150819050979650505050505050565b7f7d5d000000000000000000000000000000000000000000000000000000000000600082015250565b600061741960028361645f565b9150617424826173e3565b600282019050919050565b600061743b828961663f565b915061744682616e14565b9150617452828861663f565b915061745d82616e60565b915061746882616eac565b91506174748287616552565b915061747f82616e60565b915061748a82616ef8565b91506174968286616552565b91506174a182616e60565b91506174ac82616f44565b91506174b8828561663f565b91506174c382616f90565b91506174ce826172ae565b91506174da828461663f565b91506174e58261740c565b9150819050979650505050505050565b7f7b22746f74616c223a0000000000000000000000000000000000000000000000600082015250565b600061752b60098361645f565b9150617536826174f5565b600982019050919050565b7f2c2278615472616e73616374696f6e73223a0000000000000000000000000000600082015250565b600061757760128361645f565b915061758282617541565b601282019050919050565b60006175988261751e565b91506175a4828561663f565b91506175af8261756a565b91506175bb828461663f565b91506175c68261710c565b91508190509392505050565b600081905092915050565b60006175e882615b52565b6175f281856175d2565b9350617602818560208601615851565b80840191505092915050565b600061761a82856175dd565b915061762682846175dd565b91508190509392505050565b600061763e82846175dd565b915081905092915050565b7f2072657665727420220000000000000000000000000000000000000000000000600082015250565b600061767f60098361645f565b915061768a82617649565b600982019050919050565b7f22206661696c65642e0000000000000000000000000000000000000000000000600082015250565b60006176cb60098361645f565b91506176d682617695565b600982019050919050565b60006176ed828561663f565b91506176f882617672565b9150617704828461663f565b915061770f826176be565b91508190509392505050565b600061772682615f19565b9150600082141561773a576177396166e9565b5b600182039050919050565b7f6465706c6f7920636f6e7472616374206661696c656400000000000000000000600082015250565b600061777b601683615840565b915061778682617745565b602082019050919050565b600060208201905081810360008301526177aa8161776e565b9050919050565b600060808201905081810360008301526177cb8187615895565b905081810360208301526177df8186615895565b905081810360408301526177f38185615895565b905081810360608301526178078184615895565b905095945050505050565b600060208284031215617828576178276158fa565b5b600061783684828501616922565b91505092915050565b7f3a00000000000000000000000000000000000000000000000000000000000000600082015250565b600061787560018361645f565b91506178808261783f565b600182019050919050565b7f20756e61626c65206c696e6b20746f204246532c206572726f723a2000000000600082015250565b60006178c1601c8361645f565b91506178cc8261788b565b601c82019050919050565b60008160e01b9050919050565b60006178ef826178d7565b9050919050565b617907617902826168fe565b6178e4565b82525050565b6000617919828661663f565b915061792482617868565b9150617930828561663f565b915061793b826178b4565b915061794782846178f6565b600482019150819050949350505050565b600060ff82169050919050565b600061797082617958565b915061797b83617958565b92508282101561798e5761798d6166e9565b5b828203905092915050565b60006179a482615f19565b91506179af83615f19565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156179e8576179e76166e9565b5b828202905092915050565b7f20697320756e7265676973746572656420696e207861207472616e736163746960008201527f6f6e3a2000000000000000000000000000000000000000000000000000000000602082015250565b6000617a4f60248361645f565b9150617a5a826179f3565b602482019050919050565b6000617a71828561663f565b9150617a7c82617a42565b9150617a88828461663f565b91508190509392505050565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b6000617aca60018361645f565b9150617ad582617a94565b600182019050919050565b6000617aec828561663f565b9150617af782617abd565b9150617b03828461663f565b91508190509392505050565b7f20697320756e7265676973746572656420696e207861207472616e736163746960008201527f6f6e200000000000000000000000000000000000000000000000000000000000602082015250565b6000617b6b60238361645f565b9150617b7682617b0f565b602382019050919050565b6000617b8d828561663f565b9150617b9882617b5e565b9150617ba4828461663f565b91508190509392505050565b7f7365712073686f756c642062652067726561746572207468616e206265666f7260008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000617c0c602183615840565b9150617c1782617bb0565b604082019050919050565b60006020820190508181036000830152617c3b81617bff565b9050919050565b617c4b81616014565b8114617c5657600080fd5b50565b600081519050617c6881617c42565b92915050565b600060208284031215617c8457617c836158fa565b5b6000617c9284828501617c59565b91505092915050565b7f746865206e616d6527732061646472657373206e6f742065786973742e000000600082015250565b6000617cd1601d83615840565b9150617cdc82617c9b565b602082019050919050565b60006020820190508181036000830152617d0081617cc4565b9050919050565b60008160011c9050919050565b6000808291508390505b6001851115617d5e57808604811115617d3a57617d396166e9565b5b6001851615617d495780820291505b8081029050617d5785617d07565b9450617d1e565b94509492505050565b600082617d775760019050617e33565b81617d855760009050617e33565b8160018114617d9b5760028114617da557617dd4565b6001915050617e33565b60ff841115617db757617db66166e9565b5b8360020a915084821115617dce57617dcd6166e9565b5b50617e33565b5060208310610133831016604e8410600b8410161715617e095782820a905083811115617e0457617e036166e9565b5b617e33565b617e168484846001617d14565b92509050818404811115617e2d57617e2c6166e9565b5b81810290505b9392505050565b6000617e4582615f19565b9150617e5083615f19565b9250617e7d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484617d67565b905092915050565b6000617e9082617958565b9150617e9b83617958565b925082617eab57617eaa616887565b5b828204905092915050565b6000617ec182617958565b9150617ecc83617958565b92508160ff0483118215151615617ee657617ee56166e9565b5b828202905092915050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b6000617f2760028361645f565b9150617f3282617ef1565b600282019050919050565b6000617f4882617f1a565b9150617f54828461663f565b915081905092915050565b7f2f00000000000000000000000000000000000000000000000000000000000000600082015250565b6000617f9560018361645f565b9150617fa082617f5f565b600182019050919050565b6000617fb7828661663f565b9150617fc3828561663f565b9150617fce82617f88565b9150617fda",
        "828461663f565b9150819050949350505050565b7f5b22000000000000000000000000000000000000000000000000000000000000600082015250565b600061801d60028361645f565b915061802882617fe7565b600282019050919050565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b600061806960018361645f565b915061807482618033565b600182019050919050565b600061808a82618010565b91506180968284616552565b91506180a18261805c565b915081905092915050565b7f2c22000000000000000000000000000000000000000000000000000000000000600082015250565b60006180e260028361645f565b91506180ed826180ac565b600282019050919050565b6000618104828561663f565b915061810f826180d5565b915061811b8284616552565b91506181268261805c565b91508190509392505050565b7f5d00000000000000000000000000000000000000000000000000000000000000600082015250565b600061816860018361645f565b915061817382618132565b600182019050919050565b600061818a828461663f565b91506181958261815b565b915081905092915050565b60006181ab82615f19565b91506181b683615f19565b9250826181c6576181c5616887565b5b828206905092915050565b7f5b00000000000000000000000000000000000000000000000000000000000000600082015250565b600061820760018361645f565b9150618212826181d1565b600182019050919050565b6000618228826181fa565b9150618234828461663f565b915081905092915050565b600061824b828561663f565b915061825682616f90565b9150618262828461663f565b91508190509392505050565b7f64656c657465206e6f6e6578697374656e74207861207472616e73616374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006182ca602183615840565b91506182d58261826e565b604082019050919050565b600060208201905081810360008301526182f9816182bd565b9050919050565b7f64656c65746520756e6d617463686564207861207472616e73616374696f6e00600082015250565b6000618336601f83615840565b915061834182618300565b602082019050919050565b6000602082019050818103600083015261836581618329565b9050919050565b6000618378828561663f565b9150618384828461663f565b91508190509392505050565b600061839b82617958565b91506183a683617958565b92508260ff038211156183bc576183bb6166e9565b5b828201905092915050565b7f7b2278615472616e73616374696f6e536571223a000000000000000000000000600082015250565b60006183fd60148361645f565b9150618408826183c7565b601482019050919050565b7f2270617468223a22000000000000000000000000000000000000000000000000600082015250565b600061844960088361645f565b915061845482618413565b600882019050919050565b7f226d6574686f64223a2200000000000000000000000000000000000000000000600082015250565b6000618495600a8361645f565b91506184a08261845f565b600a82019050919050565b7f2261726773223a22000000000000000000000000000000000000000000000000600082015250565b60006184e160088361645f565b91506184ec826184ab565b600882019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b600061852d60028361645f565b9150618538826184f7565b600282019050919050565b600061854e826183f0565b915061855a828961663f565b915061856582616f90565b915061857082616eac565b915061857c828861663f565b915061858782616e60565b91506185928261843c565b915061859e828761663f565b91506185a982616e60565b91506185b4826172ae565b91506185c0828661663f565b91506185cb82616f90565b91506185d682618488565b91506185e2828561663f565b91506185ed82616e60565b91506185f8826184d4565b9150618604828461663f565b915061860f82618520565b915081905097965050505050505056fea2646970667358221220be4060ac28d1b3c633d4e3dc6951bc956a53be615bb0ff9906e6bbd6faee4cd464736f6c634300080b0033"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "",
        "",
        "",
        "",
        "d961590e565b5b6040519080825280601f01601f19166020018201604052801561500c5781602001600182028036833780820191505090505b5090506000602060ff16905060005b8181101561508f5784816020811061503657615035616648565b5b1a60f81b83828151811061504d5761504c616648565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061508790616797565b91505061501b565b508192505050919050565b6000600a8260f81c60ff1610156150c55760308260f81c6150bb9190618390565b60f81b90506150db565b60578260f81c6150d59190618390565b60f81b90505b919050565b60606150eb82613843565b836000015184604001516151028660200151613843565b61510f8760800151615148565b61511c8860a001516153a7565b60405160200161513196959493929190618543565b604051602081830303815290604052905092915050565b6060600082905060008151905060008167ffffffffffffffff8111156151715761517061590e565b5b6040519080825280601f01601f1916602001820160405280156151a35781602001600182028036833780820191505090505b50905060007f280000000000000000000000000000000000000000000000000000000000000090506000805b848110156152c857827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191686828151811061520d5761520c616648565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146152b05785818151811061525257615251616648565b5b602001015160f81c60f81b84838061526990616797565b94508151811061527c5761527b616648565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506152b5565b6152c8565b80806152c090616797565b9150506151cf565b5060008167ffffffffffffffff8111156152e5576152e461590e565b5b6040519080825280601f01601f1916602001820160405280156153175781602001600182028036833780820191505090505b50905060005b828110156153985784818151811061533857615337616648565b5b602001015160f81c60f81b82828151811061535657615355616648565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061539090616797565b91505061531d565b50809650505050505050919050565b606060008251905060006002826153be91906166e7565b67ffffffffffffffff8111156153d7576153d661590e565b5b6040519080825280601f01601f1916602001820160405280156154095781602001600182028036833780820191505090505b50905060005b8281101561554557600085828151811061542c5761542b616648565b5b602001015160f81c60f81b9050600060108260f81c61544b9190617fd8565b60f81b905060008160f81c60106154629190618009565b8360f81c61547091906166b3565b60f81b905061547e8261509a565b8560028661548c91906166e7565b8151811061549d5761549c616648565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506154d58161509a565b8560016002876154e591906166e7565b6154ef9190616741565b81518110615500576154ff616648565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050808061553d90616797565b91505061540f565b508092505050919050565b82805461555c906164e1565b90600052602060002090601f01602090048101928261557e57600085556155c5565b82601f1061559757805160ff19168380011785556155c5565b828001600101855582156155c5579182015b828111156155c45782518255916020019190600101906155a9565b5b5090506155d291906157f4565b5090565b8280546155e2906164e1565b90600052602060002090601f016020900481019282615604576000855561564b565b82601f1061561d57805160ff191683800117855561564b565b8280016001018555821561564b579182015b8281111561564a57825182559160200191906001019061562f565b5b50905061565891906157f4565b5090565b508054600082559060005260206000209081019061567a9190615811565b50565b8280548282559060005260206000209081019282156156cc579160200282015b828111156156cb5782518290805190602001906156bb9291906155d6565b509160200191906001019061569d565b5b5090506156d99190615811565b5090565b828054828255906000526020600020908101928215615756579160200282015b828111156157555782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906156fd565b5b50905061576391906157f4565b5090565b8280548282559060005260206000209081019282156157a3579160200282015b828111156157a2578251825591602001919060010190615787565b5b5090506157b091906157f4565b5090565b5080546157c0906164e1565b6000825580601f106157d257506157f1565b601f0160209004906000526020600020908101906157f091906157f4565b5b50565b5b8082111561580d5760008160009055506001016157f5565b5090565b5b80821115615831576000818161582891906157b4565b50600101615812565b5090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561586f578082015181840152602081019050615854565b8381111561587e576000848401525b50505050565b6000601f19601f8301169050919050565b60006158a082615835565b6158aa8185615840565b93506158ba818560208601615851565b6158c381615884565b840191505092915050565b600060208201905081810360008301526158e88184615895565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7fb95aa35500000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61594682615884565b810181811067ffffffffffffffff821117156159655761596461590e565b5b80604052505050565b60006159786158f0565b9050615984828261593d565b919050565b600067ffffffffffffffff8211156159a4576159a361590e565b5b6159ad82615884565b9050602081019050919050565b82818337600083830152505050565b60006159dc6159d784615989565b61596e565b9050828152602081018484840111156159f8576159f7615909565b5b615a038482856159ba565b509392505050565b600082601f830112615a2057615a1f615904565b5b8135615a308482602086016159c9565b91505092915050565b600060208284031215615a4f57615a4e6158fa565b5b600082013567ffffffffffffffff811115615a6d57615a6c6158ff565b5b615a7984828501615a0b565b91505092915050565b600067ffffffffffffffff821115615a9d57615a9c61590e565b5b615aa682615884565b9050602081019050919050565b6000615ac6615ac184615a82565b61596e565b905082815260208101848484011115615ae257615ae1615909565b5b615aed8482856159ba565b509392505050565b600082601f830112615b0a57615b09615904565b5b8135615b1a848260208601615ab3565b91505092915050565b600080600060608486031215615b3c57615b3b6158fa565b5b600084013567ffffffffffffffff811115615b5a57615b596158ff565b5b615b6686828701615a0b565b935050602084013567ffffffffffffffff811115615b8757615b866158ff565b5b615b9386828701615a0b565b925050604084013567ffffffffffffffff811115615bb457615bb36158ff565b5b615bc086828701615af5565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000615bf182615bca565b615bfb8185615bd5565b9350615c0b818560208601615851565b615c1481615884565b840191505092915050565b60006020820190508181036000830152615c398184615be6565b905092915050565b6000819050919050565b615c5481615c41565b82525050565b6000602082019050615c6f6000830184615c4b565b92915050565b600080600060608486031215615c8e57615c8d6158fa565b5b600084013567ffffffffffffffff811115615cac57615cab6158ff565b5b615cb886828701615a0b565b935050602084013567ffffffffffffffff811115615cd957615cd86158ff565b5b615ce586828701615a0b565b925050604084013567ffffffffffffffff811115615d0657615d056158ff565b5b615d1286828701615a0b565b9150509250925092565b600080600060608486031215615d3557615d346158fa565b5b600084013567ffffffffffffffff811115615d5357615d526158ff565b5b615d5f86828701615a0b565b935050602084013567ffffffffffffffff811115615d8057615d7f6158ff565b5b615d8c86828701615af5565b925050604084013567ffffffffffffffff811115615dad57615dac6158ff565b5b615db986828701615a0b565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000615dee82615dc3565b9050919050565b615dfe81615de3565b82525050565b6000602082019050615e196000830184615df5565b92915050565b60008060008060808587031215615e3957615e386158fa565b5b600085013567ffffffffffffffff811115615e5757615e566158ff565b5b615e6387828801615a0b565b945050602085013567ffffffffffffffff811115615e8457615e836158ff565b5b615e9087828801615a0b565b935050604085013567ffffffffffffffff811115615eb157615eb06158ff565b5b615ebd87828801615a0b565b925050606085013567ffffffffffffffff811115615ede57615edd6158ff565b5b615eea87828801615af5565b91505092959194509250565b615eff81615c41565b8114615f0a57600080fd5b50565b600081359050615f1c81615ef6565b92915050565b60008060008060008060c08789031215615f3f57615f3e6158fa565b5b600087013567ffffffffffffffff811115615f5d57615f5c6158ff565b5b615f6989828a01615a0b565b965050602087013567ffffffffffffffff811115615f8a57615f896158ff565b5b615f9689828a01615a0b565b9550506040615fa789828a01615f0d565b945050606087013567ffffffffffffffff811115615fc857615fc76158ff565b5b615fd489828a01615a0b56",
        "",
        "",
        "915050565b6000617fe382616677565b9150617fee83616677565b925082617ffe57617ffd616b50565b5b828204905092915050565b600061801482616677565b915061801f83616677565b92508160ff048311821515161561803957618038616684565b5b828202905092915050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b600061807a60028361645f565b915061808582618044565b600282019050919050565b600061809b8261806d565b91506180a7828461646a565b915081905092915050565b7f5b22000000000000000000000000000000000000000000000000000000000000600082015250565b60006180e860028361645f565b91506180f3826180b2565b600282019050919050565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b600061813460018361645f565b915061813f826180fe565b600182019050919050565b6000618155826180db565b9150618161828461659a565b915061816c82618127565b915081905092915050565b7f2c22000000000000000000000000000000000000000000000000000000000000600082015250565b60006181ad60028361645f565b91506181b882618177565b600282019050919050565b60006181cf828561646a565b91506181da826181a0565b91506181e6828461659a565b91506181f182618127565b91508190509392505050565b7f5d00000000000000000000000000000000000000000000000000000000000000600082015250565b600061823360018361645f565b915061823e826181fd565b600182019050919050565b6000618255828461646a565b915061826082618226565b915081905092915050565b7f5b00000000000000000000000000000000000000000000000000000000000000600082015250565b60006182a160018361645f565b91506182ac8261826b565b600182019050919050565b60006182c282618294565b91506182ce828461646a565b915081905092915050565b60006182e5828561646a565b91506182f082617310565b91506182fc828461646a565b91508190509392505050565b7f2f00000000000000000000000000000000000000000000000000000000000000600082015250565b600061833e60018361645f565b915061834982618308565b600182019050919050565b6000618360828661646a565b915061836c828561646a565b915061837782618331565b9150618383828461646a565b9150819050949350505050565b600061839b82616677565b91506183a683616677565b92508260ff038211156183bc576183bb616684565b5b828201905092915050565b7f7b2278615472616e73616374696f6e536571223a000000000000000000000000600082015250565b60006183fd60148361645f565b9150618408826183c7565b601482019050919050565b7f2270617468223a22000000000000000000000000000000000000000000000000600082015250565b600061844960088361645f565b915061845482618413565b600882019050919050565b7f226d6574686f64223a2200000000000000000000000000000000000000000000600082015250565b6000618495600a8361645f565b91506184a08261845f565b600a82019050919050565b7f2261726773223a22000000000000000000000000000000000000000000000000600082015250565b60006184e160088361645f565b91506184ec826184ab565b600882019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b600061852d60028361645f565b9150618538826184f7565b600282019050919050565b600061854e826183f0565b915061855a828961646a565b915061856582617310565b91506185708261722c565b915061857c828861646a565b9150618587826171e0565b91506185928261843c565b915061859e828761646a565b91506185a9826171e0565b91506185b4826175fa565b91506185c0828661646a565b91506185cb82617310565b91506185d682618488565b91506185e2828561646a565b91506185ed826171e0565b91506185f8826184d4565b9150618604828461646a565b915061860f82618520565b915081905097965050505050505056fea2646970667358221220a28345ea6ba5fe631891c20290d18cd9889b93e0c1ef6148eb5b31c6bab8e04264736f6c634300080b0033"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"}],\"name\":\"addPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_xaTransactionID\",\"type\":\"string\"}],\"name\":\"commitXATransaction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_argsWithMethodId\",\"type\":\"bytes\"}],\"name\":\"constantCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_XATransactionID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_func\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"constantCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deletePathList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bin\",\"type\":\"bytes\"}],\"name\":\"deployContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_bin\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"deployContractWithRegisterBFS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestXATransaction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestXATransactionID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaths\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_xaTransactionID\",\"type\":\"string\"}],\"name\":\"getXATransaction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getXATransactionNumber\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"}],\"name\":\"getXATransactionState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_addr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"linkBFS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_index\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"listXATransactions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"readlink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_address\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_xaTransactionID\",\"type\":\"string\"}],\"name\":\"rollbackAndDeleteXATransactionTask\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_xaTransactionID\",\"type\":\"string\"}],\"name\":\"rollbackXATransaction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_argsWithMethodId\",\"type\":\"bytes\"}],\"name\":\"sendTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_XATransactionID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_XATransactionSeq\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_func\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"sendTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_xaTransactionID\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_selfPaths\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_otherPaths\",\"type\":\"string[]\"}],\"name\":\"startXATransaction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_str\",\"type\":\"string\"}],\"name\":\"stringToUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDPATH = "addPath";

    public static final String FUNC_COMMITXATRANSACTION = "commitXATransaction";

    public static final String FUNC_CONSTANTCALL = "constantCall";

    public static final String FUNC_DELETEPATHLIST = "deletePathList";

    public static final String FUNC_DEPLOYCONTRACT = "deployContract";

    public static final String FUNC_DEPLOYCONTRACTWITHREGISTERBFS = "deployContractWithRegisterBFS";

    public static final String FUNC_GETLATESTXATRANSACTION = "getLatestXATransaction";

    public static final String FUNC_GETLATESTXATRANSACTIONID = "getLatestXATransactionID";

    public static final String FUNC_GETPATHS = "getPaths";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_GETXATRANSACTION = "getXATransaction";

    public static final String FUNC_GETXATRANSACTIONNUMBER = "getXATransactionNumber";

    public static final String FUNC_GETXATRANSACTIONSTATE = "getXATransactionState";

    public static final String FUNC_LINKBFS = "linkBFS";

    public static final String FUNC_LISTXATRANSACTIONS = "listXATransactions";

    public static final String FUNC_READLINK = "readlink";

    public static final String FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK =
            "rollbackAndDeleteXATransactionTask";

    public static final String FUNC_ROLLBACKXATRANSACTION = "rollbackXATransaction";

    public static final String FUNC_SENDTRANSACTION = "sendTransaction";

    public static final String FUNC_STARTXATRANSACTION = "startXATransaction";

    public static final String FUNC_STRINGTOUINT256 = "stringToUint256";

    protected WeCrossProxy(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public TransactionReceipt addPath(String _path) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String addPath(String _path, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddPath(String _path) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddPathInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt commitXATransaction(String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_COMMITXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String commitXATransaction(String _xaTransactionID, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_COMMITXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCommitXATransaction(String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_COMMITXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getCommitXATransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_COMMITXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Tuple1<String> getCommitXATransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_COMMITXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt constantCall(String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String constantCall(
            String _name, byte[] _argsWithMethodId, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForConstantCall(String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple2<String, byte[]> getConstantCallStringBytesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, byte[]>(
                (String) results.get(0).getValue(), (byte[]) results.get(1).getValue());
    }

    public Tuple1<byte[]> getConstantCallStringBytesOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt constantCall(
            String _XATransactionID, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String constantCall(
            String _XATransactionID,
            String _path,
            String _func,
            byte[] _args,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForConstantCall(
            String _XATransactionID, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, byte[]> getConstantCallStringStringStringBytesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (byte[]) results.get(3).getValue());
    }

    public Tuple1<byte[]> getConstantCallStringStringStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt deletePathList() {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String deletePathList(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeletePathList() {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public TransactionReceipt deployContract(byte[] _bin) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String deployContract(byte[] _bin, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeployContract(byte[] _bin) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getDeployContractInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public Tuple1<String> getDeployContractOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt deployContractWithRegisterBFS(
            String _path, byte[] _bin, String _abi) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String deployContractWithRegisterBFS(
            String _path, byte[] _bin, String _abi, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeployContractWithRegisterBFS(
            String _path, byte[] _bin, String _abi) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, byte[], String> getDeployContractWithRegisterBFSInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERBFS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, byte[], String>(
                (String) results.get(0).getValue(),
                (byte[]) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public Tuple1<String> getDeployContractWithRegisterBFSOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERBFS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public String getLatestXATransaction() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETLATESTXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getLatestXATransactionID() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETLATESTXATRANSACTIONID,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getPaths() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETPATHS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt getVersion() {
        final Function function =
                new Function(
                        FUNC_GETVERSION,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getVersion(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GETVERSION,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetVersion() {
        final Function function =
                new Function(
                        FUNC_GETVERSION,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetVersionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_GETVERSION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public String getXATransaction(String _xaTransactionID) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getXATransactionNumber() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETXATRANSACTIONNUMBER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getXATransactionState(String _path) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETXATRANSACTIONSTATE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt linkBFS(String _path, String _addr, String _abi) {
        final Function function =
                new Function(
                        FUNC_LINKBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_addr),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String linkBFS(String _path, String _addr, String _abi, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_LINKBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_addr),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForLinkBFS(String _path, String _addr, String _abi) {
        final Function function =
                new Function(
                        FUNC_LINKBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_addr),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getLinkBFSInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_LINKBFS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public String listXATransactions(String _index, BigInteger _size) throws ContractException {
        final Function function =
                new Function(
                        FUNC_LISTXATRANSACTIONS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_index),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_size)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple3<String, String, String> readlink(String name) throws ContractException {
        final Function function =
                new Function(
                        FUNC_READLINK,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public TransactionReceipt rollbackAndDeleteXATransactionTask(String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String rollbackAndDeleteXATransactionTask(
            String _xaTransactionID, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRollbackAndDeleteXATransactionTask(
            String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRollbackAndDeleteXATransactionTaskInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Tuple1<String> getRollbackAndDeleteXATransactionTaskOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt rollbackXATransaction(String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String rollbackXATransaction(String _xaTransactionID, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRollbackXATransaction(String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRollbackXATransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ROLLBACKXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Tuple1<String> getRollbackXATransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_ROLLBACKXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt sendTransaction(String _uid, String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String sendTransaction(
            String _uid, String _name, byte[] _argsWithMethodId, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendTransaction(
            String _uid, String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, byte[]> getSendTransactionStringStringBytesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (byte[]) results.get(2).getValue());
    }

    public Tuple1<byte[]> getSendTransactionStringStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt sendTransaction(
            String _uid,
            String _XATransactionID,
            BigInteger _XATransactionSeq,
            String _path,
            String _func,
            byte[] _args) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        _XATransactionSeq),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String sendTransaction(
            String _uid,
            String _XATransactionID,
            BigInteger _XATransactionSeq,
            String _path,
            String _func,
            byte[] _args,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        _XATransactionSeq),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendTransaction(
            String _uid,
            String _XATransactionID,
            BigInteger _XATransactionSeq,
            String _path,
            String _func,
            byte[] _args) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        _XATransactionSeq),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple6<String, String, BigInteger, String, String, byte[]>
            getSendTransactionStringStringUint256StringStringBytesInput(
                    TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, BigInteger, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (byte[]) results.get(5).getValue());
    }

    public Tuple1<byte[]> getSendTransactionStringStringUint256StringStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt startXATransaction(
            String _xaTransactionID, List<String> _selfPaths, List<String> _otherPaths) {
        final Function function =
                new Function(
                        FUNC_STARTXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _selfPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _otherPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String startXATransaction(
            String _xaTransactionID,
            List<String> _selfPaths,
            List<String> _otherPaths,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_STARTXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _selfPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _otherPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStartXATransaction(
            String _xaTransactionID, List<String> _selfPaths, List<String> _otherPaths) {
        final Function function =
                new Function(
                        FUNC_STARTXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _selfPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _otherPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, List<String>, List<String>> getStartXATransactionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_STARTXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, List<String>, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()),
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public Tuple1<String> getStartXATransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_STARTXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt stringToUint256(String _str) {
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_str)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String stringToUint256(String _str, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_str)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStringToUint256(String _str) {
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_str)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getStringToUint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Tuple1<BigInteger> getStringToUint256Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public static WeCrossProxy load(
            String contractAddress, Client client, CryptoKeyPair credential) {
        return new WeCrossProxy(contractAddress, client, credential);
    }

    public static WeCrossProxy deploy(Client client, CryptoKeyPair credential)
            throws ContractException {
        return deploy(
                WeCrossProxy.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                getABI(),
                null,
                null);
    }
}
