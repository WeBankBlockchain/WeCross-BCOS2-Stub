package com.webank.wecross.stub.bcos.performance.hellowecross.proxy;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.crypto.EncryptType;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class WeCrossProxy extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "618f9787828801618bc7565b91505092959194509250565b60008060008060808587031215618fb957600080fd5b600085013567ffffffffffffffff811115618fd357600080fd5b618fdf87828801618bc7565b945050602085013567ffffffffffffffff811115618ffc57600080fd5b61900887828801618bc7565b935050604085013567ffffffffffffffff81111561902557600080fd5b61903187828801618bc7565b925050606085013567ffffffffffffffff81111561904e57600080fd5b61905a87828801618b07565b91505092959194509250565b6000806000806080858703121561907c57600080fd5b600085013567ffffffffffffffff81111561909657600080fd5b6190a287828801618bc7565b945050602085013567ffffffffffffffff8111156190bf57600080fd5b6190cb87828801618bc7565b935050604085013567ffffffffffffffff8111156190e857600080fd5b6190f487828801618bc7565b925050606085013567ffffffffffffffff81111561911157600080fd5b61911d87828801618bc7565b91505092959194509250565b600080600080600060a0868803121561914157600080fd5b600086013567ffffffffffffffff81111561915b57600080fd5b61916788828901618bc7565b955050602061917888828901618c73565b945050604086013567ffffffffffffffff81111561919557600080fd5b6191a188828901618bc7565b935050606086013567ffffffffffffffff8111156191be57600080fd5b6191ca88828901618bc7565b925050608086013567ffffffffffffffff8111156191e757600080fd5b6191f388828901618b07565b9150509295509295909350565b6192098161990d565b82525050565b600061921a826198d4565b80845260208401935083602082028501619233856198c7565b60005b8481101561926c57838303885261924e8383516192e9565b925061925982619900565b9150602088019750600181019050619236565b508196508694505050505092915050565b6000619288826198df565b80845261929c81602086016020860161997e565b6192a5816199b1565b602085010191505092915050565b60006192be826198f5565b8084526192d281602086016020860161997e565b6192db816199b1565b602085010191505092915050565b60006192f4826198ea565b80845261930881602086016020860161997e565b619311816199b1565b602085010191505092915050565b6000601f82527f7472616e73616374696f6e20686173206265656e20726f6c6c65646261636b006020830152604082019050919050565b6000601e82527f7472616e73616374696f6e20686173206265656e20636f6d6d697474656400006020830152604082019050919050565b6000601c82527f63616c6c2074617267657420636f6e7472616374206661696c656421000000006020830152604082019050919050565b6000601582527f7472616e73616374696f6e206e6f7420666f756e6400000000000000000000006020830152604082019050919050565b6000601682527f6465706c6f7920636f6e7472616374206661696c6564000000000000000000006020830152604082019050919050565b6000601e82527f64656c657465206e6f6e6578697374656e74207472616e73616374696f6e00006020830152604082019050919050565b6000602182527f7365712073686f756c642062652067726561746572207468616e206265666f7260208301527f65000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601182527f696e76616c696420617267756d656e74730000000000000000000000000000006020830152604082019050919050565b6000601d82527f746865206e616d6527732061646472657373206e6f742065786973742e0000006020830152604082019050919050565b6000601c82527f64656c65746520756e6d617463686564207472616e73616374696f6e000000006020830152604082019050919050565b6195748161993f565b82525050565b600060208201905061958f6000830184619200565b92915050565b600060208201905081810360008301526195af818461920f565b905092915050565b600060208201905081810360008301526195d1818461927d565b905092915050565b600060208201905081810360008301526195f381846192b3565b905092915050565b6000604082019050818103600083015261961581856192b3565b9050818103602083015261962981846192b3565b90509392505050565b6000608082019050818103600083015261964c81876192b3565b9050818103602083015261966081866192b3565b9050818103604083015261967481856192b3565b9050818103606083015261968881846192b3565b905095945050505050565b600060208201905081810360008301526196ac8161931f565b9050919050565b600060208201905081810360008301526196cc81619356565b9050919050565b600060208201905081810360008301526196ec8161938d565b9050919050565b6000602082019050818103600083015261970c816193c4565b9050919050565b6000602082019050818103600083015261972c816193fb565b9050919050565b6000602082019050818103600083015261974c81619432565b9050919050565b6000602082019050818103600083015261976c81619469565b9050919050565b6000602082019050818103600083015261978c816194c6565b9050919050565b600060208201905081810360008301526197ac816194fd565b9050919050565b600060208201905081810360008301526197cc81619534565b9050919050565b60006020820190506197e8600083018461956b565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561981157600080fd5b8060405250919050565b600067ffffffffffffffff82111561983257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561985a57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561988657600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156198b257600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b60006199188261991f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006199548261991f565b9050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561999c578082015181840152602081019050619981565b838111156199ab576000848401525b50505050565b6000601f19601f830116905091905056fe206973206c6f636b656420627920756e66696e6973686564207472616e73616374696f6e3a20a265627a7a72305820af2c0ccfdd76ea95e7a5b1f7a10e991d4bae00e84ab857d080619d141822a8bd6c6578706572696d656e74616cf50037"
    };

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_argsWithMethodId\",\"type\":\"bytes\"}],\"name\":\"sendTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"commitTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"string\"},{\"name\":\"_bin\",\"type\":\"bytes\"},{\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"deployContractWithRegisterCNS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_argsWithMethodId\",\"type\":\"bytes\"}],\"name\":\"sendTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_argsWithMethodId\",\"type\":\"bytes\"}],\"name\":\"constantCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"setMaxStep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTransactionIDs\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"getPaths\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"rollbackTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"string\"},{\"name\":\"_addr\",\"type\":\"string\"},{\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"registerCNS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionID\",\"type\":\"string\"},{\"name\":\"_seq\",\"type\":\"uint256\"},{\"name\":\"_path\",\"type\":\"string\"},{\"name\":\"_func\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"sendTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bin\",\"type\":\"bytes\"}],\"name\":\"deployContract\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"selectByName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"}],\"name\":\"selectByNameAndVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"getVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"rollbackAndDeleteTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestTransactionInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_str\",\"type\":\"string\"}],\"name\":\"stringToUint256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionID\",\"type\":\"string\"},{\"name\":\"_path\",\"type\":\"string\"},{\"name\":\"_func\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"constantCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getAddressByNameByCache\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"getMaxStep\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"getTransactionInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"addPath\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"startTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"deletePathList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"
    };

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "",
        "ffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016040516020018083805190602001908083835b602083101515611ff05780518252602082019150602081019050602083039250611fcb565b6001836020036101000a038019825116818451168082178552505050505050905001806199c460269139602601828054600181600116156101000203166002900480156120745780601f10612052576101008083540402835291820191612074565b820191906000526020600020905b815481529060010190602001808311612060575b5050925050506040516020818303038152906040526040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016120bc91906195da565b60405180910390fd5b60006120d08561478d565b90506000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8eaa08d898961211d86616628565b896040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121599493929190619633565b602060405180830381600087803b15801561217357600080fd5b505af1158015612187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121ab9190810190618d5e565b9050806001148888836040516020018084805190602001908083835b6020831015156121ec57805182526020820191506020810190506020830392506121c7565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b6020831015156122675780518252602082019150602081019050602083039250612242565b6001836020036101000a038019825116818451168082178552505050505050905001807f20756e61626c6520726567697374657220746f20636e732c206572726f723a20815250602001828152602001935050505060405160208183030381529060405290151561230e576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161230591906195da565b60405180910390fd5b50816003896040518082805190602001908083835b6020831015156123485780518252602082019150602081019050602083039250612323565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550819350505050949350505050565b60608060016040519080825280602002602001820160405280156123ff57816020015b60608152602001906001900390816123ea5790505b5090506060600554600454141561246c576040805190810160405280600481526020017f6e756c6c0000000000000000000000000000000000000000000000000000000081525082600081518110151561245557fe5b906020019060200201819052508192505050612588565b600660045481548110151561247d57fe5b906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561251b5780601f106124f05761010080835404028352916020019161251b565b820191906000526020600020905b8154815290600101906020018083116124fe57829003601f168201915b505050505090506060600160405190808252806020026020018201604052801561255957816020015b60608152602001906001900390816125445790505b5090508181600081518110151561256c57fe5b906020019060200201819052506125828161258b565b93505050505b90565b60608060016040519080825280602002602001820160405280156125c357816020015b60608152602001906001900390816125ae5790505b5090506001835114151561260c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612603906196d4565b60405180910390fd5b606083600081518110151561261d57fe5b90602001906020020151905061263281615a6d565b1515612673576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161266a906197b4565b60405180910390fd5b60006001826040518082805190602001908083835b6020831015156126ad5780518252602082019150602081019050602083039250612688565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000180549050905060606001836040518082805190602001908083835b60208310151561272357805182526020820191506020810190506020830392506126fe565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001600081548110151561276757fe5b9060005260206000200160405160200180807f5b00000000000000000000000000000000000000000000000000000000000000815250600101807f22000000000000000000000000000000000000000000000000000000000000008152506001018280546001816001161561010002031660029004801561281f5780601f106127fd57610100808354040283529182019161281f565b820191906000526020600020905b81548152906001019060200180831161280b575b5050807f220000000000000000000000000000000000000000000000000000000000000081525060010191505060405160208183030381529060405290506000600190505b82811015612a3f57816001856040518082805190602001908083835b6020831015156128a55780518252602082019150602081019050602083039250612880565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001828154811015156128e857fe5b906000526020600020016040516020018083805190602001908083835b60208310151561292a5780518252602082019150602081019050602083039250612905565b6001836020036101000a038019825116818451168082178552505050505050905001807f2c00000000000000000000000000000000000000000000000000000000000000815250600101807f2200000000000000000000000000000000000000000000000000000000000000815250600101828054600181600116156101000203166002900480156129f35780601f106129d15761010080835404028352918201916129f3565b820191906000526020600020905b8154815290600101906020018083116129df575b5050807f22000000000000000000000000000000000000000000000000000000000000008152506001019250505060405160208183030381529060405291508080600101915050612864565b50806040516020018082805190602001908083835b602083101515612a795780518252602082019150602081019050602083039250612a54565b6001836020036101000a038019825116818451168082178552505050505050905001807f5d00000000000000000000000000000000000000000000000000000000000000815250600101915050604051602081830303815290604052905060006001846040518082805190602001908083835b602083101515612b115780518252602082019150602081019050602083039250612aec565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010180549050905060606001856040518082805190602001908083835b602083101515612b875780518252602082019150602081019050602083039250612b62565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001016000815481101515612bcb57fe5b9060005260206000200160405160200180807f5b00000000000000000000000000000000000000000000000000000000000000815250600101807f220000000000000000000000000000000000000000000000000000000000000081525060010182805460018160011615610100020316600290048015612c835780601f10612c61576101008083540402835291820191612c83565b820191906000526020600020905b815481529060010190602001808311612c6f575b5050807f220000000000000000000000000000000000000000000000000000000000000081525060010191505060405160208183030381529060405290506000600190505b82811015612ea357816001876040518082805190602001908083835b602083101515612d095780518252602082019150602081019050602083039250612ce4565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010182815481101515612d4c57fe5b906000526020600020016040516020018083805190602001908083835b602083101515612d8e5780518252602082019150602081019050602083039250612d69565b6001836020036101000a038019825116818451168082178552505050505050905001807f2c00000000000000000000000000000000000000000000000000000000000000815250600101807f220000000000000000000000000000000000000000000000000000000000000081525060010182805460018160011615610100020316600290048015612e575780601f10612e35576101008083540402835291820191612e57565b820191906000526020600020905b815481529060010190602001808311612e43575b5050807f22000000000000000000000000000000000000000000000000000000000000008152506001019250505060405160208183030381529060405291508080600101915050612cc8565b50806040516020018082805190602001908083835b602083101515612edd5780518252602082019150602081019050602083039250612eb8565b6001836020036101000a038019825116818451168082178552505050505050905001807f5d00000000000000000000000000000000000000000000000000000000000000815250600101915050604051602081830303815290604052905084612fc36001876040518082805190602001908083835b602083101515612f775780518252602082019150602081019050602083039250612f52565b6001836020036101000a03801982511681845116",
        "8082178552505050505050905001915050908152602001604051809103902060030160009054906101000a900460ff1660ff166168d2565b848361303c60018a6040518082805190602001908083835b6020831015156130005780518252602082019150602081019050602083039250612fdb565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600401546168d2565b6130b360018b6040518082805190602001908083835b6020831015156130775780518252602082019150602081019050602083039250613052565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600501546168d2565b61312a60018c6040518082805190602001908083835b6020831015156130ee57805182526020820191506020810190506020830392506130c9565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600601546168d2565b61325f8c60018e6040518082805190602001908083835b6020831015156131665780518252602082019150602081019050602083039250613141565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206007018054806020026020016040519081016040528092919081815260200182805480156131e657602002820191906000526020600020905b8154815260200190600101908083116131d2575b505050505060018f6040518082805190602001908083835b60208310151561322357805182526020820191506020810190506020830392506131fe565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206008015461699c565b60405160200180807f7b227472616e73616374696f6e4944223a000000000000000000000000000000815250601101807f220000000000000000000000000000000000000000000000000000000000000081525060010189805190602001908083835b6020831015156132e757805182526020820191506020810190506020830392506132c2565b6001836020036101000a038019825116818451168082178552505050505050905001807f222c000000000000000000000000000000000000000000000000000000000000815250600201807f22737461747573223a000000000000000000000000000000000000000000000081525060090188805190602001908083835b60208310151561338a5780518252602082019150602081019050602083039250613365565b6001836020036101000a038019825116818451168082178552505050505050905001807f2c00000000000000000000000000000000000000000000000000000000000000815250600101807f22616c6c5061746873223a000000000000000000000000000000000000000000815250600b0187805190602001908083835b60208310151561342d5780518252602082019150602081019050602083039250613408565b6001836020036101000a038019825116818451168082178552505050505050905001807f2c00000000000000000000000000000000000000000000000000000000000000815250600101807f227061746873223a00000000000000000000000000000000000000000000000081525060080186805190602001908083835b6020831015156134d057805182526020820191506020810190506020830392506134ab565b6001836020036101000a038019825116818451168082178552505050505050905001807f2c00000000000000000000000000000000000000000000000000000000000000815250600101807f22737461727454696d657374616d70223a000000000000000000000000000000815250601101807f220000000000000000000000000000000000000000000000000000000000000081525060010185805190602001908083835b60208310151561359b5780518252602082019150602081019050602083039250613576565b6001836020036101000a038019825116818451168082178552505050505050905001807f222c000000000000000000000000000000000000000000000000000000000000815250600201807f22636f6d6d697454696d657374616d70223a0000000000000000000000000000815250601201807f220000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b6020831015156136665780518252602082019150602081019050602083039250613641565b6001836020036101000a038019825116818451168082178552505050505050905001807f222c000000000000000000000000000000000000000000000000000000000000815250600201807f22726f6c6c6261636b54696d657374616d70223a000000000000000000000000815250601401807f220000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b602083101515613731578051825260208201915060208101905060208303925061370c565b6001836020036101000a038019825116818451168082178552505050505050905001807f222c00000000000000000000000000000000000000000000000000000000000081525060020182805190602001908083835b6020831015156137ac5780518252602082019150602081019050602083039250613787565b6001836020036101000a038019825116818451168082178552505050505050905001807f7d000000000000000000000000000000000000000000000000000000000000008152506001019850505050505050505060405160208183030381529060405286600081518110151561381e57fe5b90602001906020020181905250859650505050505050919050565b606080600160405190808252806020026020018201604052801561387157816020015b606081526020019060019003908161385c5790505b5090506040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152508160008151811015156138b957fe5b906020019060200201819052506000835190506004811015613910576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613907906196d4565b60405180910390fd5b600061393385600181518110151561392457fe5b906020019060200201516109bf565b9050600081148061394957508160028260020201115b15613989576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613980906196d4565b60405180910390fd5b606085600081518110151561399a57fe5b9060200190602002015190506139af81615a6d565b15613aad578060405160200180807f7472616e73616374696f6e200000000000000000000000000000000000000000815250600c0182805190602001908083835b602083101515613a1557805182526020820191506020810190506020830392506139f0565b6001836020036101000a038019825116818451168082178552505050505050905001807f20616c7265616479206578697374730000000000000000000000000000000000815250600f019150506040516020818303038152906040526040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613aa491906195da565b60405180910390fd5b606082604051908082528060200260200182016040528015613ade5781602001602082028038833980820191505090505b5090506060600284860303604051908082528060200260200182016040528015613b1c57816020015b6060815260200190600190039081613b075790505b509050606084604051908082528060200260200182016040528015613b5557816020015b6060815260200190600190039081613b405790505b50905060008090505b85811015613ef9578960028201815181101515613b7757fe5b906020019060200201518282815181101515613b8f57fe5b906020019060200201819052506000613bc18b60028401815181101515613bb257fe5b9060200190602002015161579a565b9050808583815181101515613bd257fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615613dcb578a60028301815181101515613c7357fe5b906020019060200201516000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016040516020018083805190602001908083835b602083101515613cf65780518252602082019150602081019050602083039250613cd1565b6001836020036101000a038019825116818451168082178552505050505050905001806199c46026913960260182805460018160011615610100020316600290048015613d7a5780601f10613d58576101008083540402835291820191613d7a565b820191906000526020600020905b815481529060010190602001808311613d66575b5050925050506040516020818303038152906040526040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613dc291906195da565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055508a60028301815181101515613e3657fe5b906020019060200201516000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019080519060200190613e9492919061879b565b50856000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019080519060200190613eea92919061879b565b50508080600101915050613b5e565b5060008090505b856002880303811015613f525789866002830101815181101515613f2057fe5b906020019060200201518382815181101515613f3857fe5b906020019060200201819052508080600101915050613f00565b506060600754604051908082528060200260200182016040528015613f865781602001602082028038833980820191505090505b5090506101",
        "",
        "",
        "",
        "",
        "",
        "5b618f9887828801618bc8565b91505092959194509250565b60008060008060808587031215618fba57600080fd5b600085013567ffffffffffffffff811115618fd457600080fd5b618fe087828801618bc8565b945050602085013567ffffffffffffffff811115618ffd57600080fd5b61900987828801618bc8565b935050604085013567ffffffffffffffff81111561902657600080fd5b61903287828801618bc8565b925050606085013567ffffffffffffffff81111561904f57600080fd5b61905b87828801618b08565b91505092959194509250565b6000806000806080858703121561907d57600080fd5b600085013567ffffffffffffffff81111561909757600080fd5b6190a387828801618bc8565b945050602085013567ffffffffffffffff8111156190c057600080fd5b6190cc87828801618bc8565b935050604085013567ffffffffffffffff8111156190e957600080fd5b6190f587828801618bc8565b925050606085013567ffffffffffffffff81111561911257600080fd5b61911e87828801618bc8565b91505092959194509250565b600080600080600060a0868803121561914257600080fd5b600086013567ffffffffffffffff81111561915c57600080fd5b61916888828901618bc8565b955050602061917988828901618c74565b945050604086013567ffffffffffffffff81111561919657600080fd5b6191a288828901618bc8565b935050606086013567ffffffffffffffff8111156191bf57600080fd5b6191cb88828901618bc8565b925050608086013567ffffffffffffffff8111156191e857600080fd5b6191f488828901618b08565b9150509295509295909350565b61920a8161990e565b82525050565b600061921b826198d5565b80845260208401935083602082028501619234856198c8565b60005b8481101561926d57838303885261924f8383516192ea565b925061925a82619901565b9150602088019750600181019050619237565b508196508694505050505092915050565b6000619289826198e0565b80845261929d81602086016020860161997f565b6192a6816199b2565b602085010191505092915050565b60006192bf826198f6565b8084526192d381602086016020860161997f565b6192dc816199b2565b602085010191505092915050565b60006192f5826198eb565b80845261930981602086016020860161997f565b619312816199b2565b602085010191505092915050565b6000601e82527f7472616e73616374696f6e20686173206265656e20636f6d6d697474656400006020830152604082019050919050565b6000601d82527f746865206e616d6527732061646472657373206e6f742065786973742e0000006020830152604082019050919050565b6000601182527f696e76616c696420617267756d656e74730000000000000000000000000000006020830152604082019050919050565b6000601c82527f63616c6c2074617267657420636f6e7472616374206661696c656421000000006020830152604082019050919050565b6000601f82527f7472616e73616374696f6e20686173206265656e20726f6c6c65646261636b006020830152604082019050919050565b6000601682527f6465706c6f7920636f6e7472616374206661696c6564000000000000000000006020830152604082019050919050565b6000601e82527f64656c657465206e6f6e6578697374656e74207472616e73616374696f6e00006020830152604082019050919050565b6000602182527f7365712073686f756c642062652067726561746572207468616e206265666f7260208301527f65000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601c82527f64656c65746520756e6d617463686564207472616e73616374696f6e000000006020830152604082019050919050565b6000601582527f7472616e73616374696f6e206e6f7420666f756e6400000000000000000000006020830152604082019050919050565b61957581619940565b82525050565b60006020820190506195906000830184619201565b92915050565b600060208201905081810360008301526195b08184619210565b905092915050565b600060208201905081810360008301526195d2818461927e565b905092915050565b600060208201905081810360008301526195f481846192b4565b905092915050565b6000604082019050818103600083015261961681856192b4565b9050818103602083015261962a81846192b4565b90509392505050565b6000608082019050818103600083015261964d81876192b4565b9050818103602083015261966181866192b4565b9050818103604083015261967581856192b4565b9050818103606083015261968981846192b4565b905095945050505050565b600060208201905081810360008301526196ad81619320565b9050919050565b600060208201905081810360008301526196cd81619357565b9050919050565b600060208201905081810360008301526196ed8161938e565b9050919050565b6000602082019050818103600083015261970d816193c5565b9050919050565b6000602082019050818103600083015261972d816193fc565b9050919050565b6000602082019050818103600083015261974d81619433565b9050919050565b6000602082019050818103600083015261976d8161946a565b9050919050565b6000602082019050818103600083015261978d816194a1565b9050919050565b600060208201905081810360008301526197ad816194fe565b9050919050565b600060208201905081810360008301526197cd81619535565b9050919050565b60006020820190506197e9600083018461956c565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561981257600080fd5b8060405250919050565b600067ffffffffffffffff82111561983357600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561985b57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561988757600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156198b357600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600061991982619920565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061995582619920565b9050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561999d578082015181840152602081019050619982565b838111156199ac576000848401525b50505050565b6000601f19601f830116905091905056fe206973206c6f636b656420627920756e66696e6973686564207472616e73616374696f6e3a20a265627a7a723058206f31000bb0880fdb51bad5f5c1bf8507e5ab803231d460761d8d7ad091d0c3086c6578706572696d656e74616cf50037"
    };

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String FUNC_SENDTRANSACTION = "sendTransaction";

    public static final String FUNC_COMMITTRANSACTION = "commitTransaction";

    public static final String FUNC_DEPLOYCONTRACTWITHREGISTERCNS = "deployContractWithRegisterCNS";

    public static final String FUNC_CONSTANTCALL = "constantCall";

    public static final String FUNC_SETMAXSTEP = "setMaxStep";

    public static final String FUNC_GETTRANSACTIONIDS = "getTransactionIDs";

    public static final String FUNC_GETPATHS = "getPaths";

    public static final String FUNC_ROLLBACKTRANSACTION = "rollbackTransaction";

    public static final String FUNC_GETLATESTTRANSACTION = "getLatestTransaction";

    public static final String FUNC_REGISTERCNS = "registerCNS";

    public static final String FUNC_DEPLOYCONTRACT = "deployContract";

    public static final String FUNC_SELECTBYNAME = "selectByName";

    public static final String FUNC_SELECTBYNAMEANDVERSION = "selectByNameAndVersion";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_ROLLBACKANDDELETETRANSACTION = "rollbackAndDeleteTransaction";

    public static final String FUNC_GETLATESTTRANSACTIONINFO = "getLatestTransactionInfo";

    public static final String FUNC_STRINGTOUINT256 = "stringToUint256";

    public static final String FUNC_GETADDRESSBYNAMEBYCACHE = "getAddressByNameByCache";

    public static final String FUNC_GETMAXSTEP = "getMaxStep";

    public static final String FUNC_GETTRANSACTIONINFO = "getTransactionInfo";

    public static final String FUNC_ADDPATH = "addPath";

    public static final String FUNC_STARTTRANSACTION = "startTransaction";

    public static final String FUNC_DELETEPATHLIST = "deletePathList";

    @Deprecated
    protected WeCrossProxy(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected WeCrossProxy(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected WeCrossProxy(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected WeCrossProxy(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static String getBinary() {
        return (EncryptType.encryptType == EncryptType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> sendTransaction(String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void sendTransaction(
            String _name, byte[] _argsWithMethodId, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String sendTransactionSeq(String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, byte[]> getSendTransactionStringBytesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple2<String, byte[]>(
                (String) results.get(0).getValue(), (byte[]) results.get(1).getValue());
    }

    public Tuple1<byte[]> getSendTransactionStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> commitTransaction(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_COMMITTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void commitTransaction(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_COMMITTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String commitTransactionSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_COMMITTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getCommitTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_COMMITTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public Tuple1<List<String>> getCommitTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_COMMITTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<TransactionReceipt> deployContractWithRegisterCNS(
            String _name, String _version, byte[] _bin, String _abi) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_version),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_bin),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void deployContractWithRegisterCNS(
            String _name,
            String _version,
            byte[] _bin,
            String _abi,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_version),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_bin),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String deployContractWithRegisterCNSSeq(
            String _name, String _version, byte[] _bin, String _abi) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_version),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_bin),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, byte[], String> getDeployContractWithRegisterCNSInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERCNS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple4<String, String, byte[], String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (byte[]) results.get(2).getValue(),
                (String) results.get(3).getValue());
    }

    public Tuple1<String> getDeployContractWithRegisterCNSOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERCNS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> sendTransactionByAddress(
            String _addr, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void sendTransactionByAddress(
            String _addr, byte[] _argsWithMethodId, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String sendTransactionByAddressSeq(String _addr, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, byte[]> getSendTransactionAddressBytesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple2<String, byte[]>(
                (String) results.get(0).getValue(), (byte[]) results.get(1).getValue());
    }

    public Tuple1<byte[]> getSendTransactionAddressBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> constantCall(String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void constantCall(
            String _name, byte[] _argsWithMethodId, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String constantCallSeq(String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, byte[]> getConstantCallStringBytesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple2<String, byte[]>(
                (String) results.get(0).getValue(), (byte[]) results.get(1).getValue());
    }

    public Tuple1<byte[]> getConstantCallStringBytesOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> setMaxStep(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_SETMAXSTEP,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setMaxStep(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETMAXSTEP,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setMaxStepSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_SETMAXSTEP,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getSetMaxStepInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETMAXSTEP,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<List> getTransactionIDs() {
        final Function function =
                new Function(
                        FUNC_GETTRANSACTIONIDS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> getPaths(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_GETPATHS,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> rollbackTransaction(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void rollbackTransaction(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String rollbackTransactionSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getRollbackTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ROLLBACKTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public Tuple1<List<String>> getRollbackTransactionOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_ROLLBACKTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<String> getLatestTransaction() {
        final Function function =
                new Function(
                        FUNC_GETLATESTTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> registerCNS(
            String _name, String _version, String _addr, String _abi) {
        final Function function =
                new Function(
                        FUNC_REGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_version),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerCNS(
            String _name,
            String _version,
            String _addr,
            String _abi,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_REGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_version),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerCNSSeq(String _name, String _version, String _addr, String _abi) {
        final Function function =
                new Function(
                        FUNC_REGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_version),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, String, String> getRegisterCNSInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REGISTERCNS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple4<String, String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue());
    }

    public RemoteCall<TransactionReceipt> sendTransaction(
            String _transactionID, BigInteger _seq, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_seq),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void sendTransaction(
            String _transactionID,
            BigInteger _seq,
            String _path,
            String _func,
            byte[] _args,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_seq),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String sendTransactionSeq(
            String _transactionID, BigInteger _seq, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_seq),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple5<String, BigInteger, String, String, byte[]>
            getSendTransactionStringUint256StringStringBytesInput(
                    TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple5<String, BigInteger, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (byte[]) results.get(4).getValue());
    }

    public Tuple1<byte[]> getSendTransactionStringUint256StringStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> deployContract(byte[] bin) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(bin)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void deployContract(byte[] bin, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(bin)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String deployContractSeq(byte[] bin) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(bin)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<byte[]> getDeployContractInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public Tuple1<String> getDeployContractOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public RemoteCall<String> selectByName(String name) {
        final Function function =
                new Function(
                        FUNC_SELECTBYNAME,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> selectByNameAndVersion(String name, String version) {
        final Function function =
                new Function(
                        FUNC_SELECTBYNAMEANDVERSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(version)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getVersion(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_GETVERSION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> rollbackAndDeleteTransaction(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETETRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void rollbackAndDeleteTransaction(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETETRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String rollbackAndDeleteTransactionSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETETRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getRollbackAndDeleteTransactionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETETRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public Tuple1<List<String>> getRollbackAndDeleteTransactionOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETETRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<List> getLatestTransactionInfo() {
        final Function function =
                new Function(
                        FUNC_GETLATESTTRANSACTIONINFO,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> stringToUint256(String _str) {
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_str)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> constantCall(
            String _transactionID, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void constantCall(
            String _transactionID,
            String _path,
            String _func,
            byte[] _args,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String constantCallSeq(String _transactionID, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, String, byte[]> getConstantCallStringStringStringBytesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple4<String, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (byte[]) results.get(3).getValue());
    }

    public Tuple1<byte[]> getConstantCallStringStringStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<String> getAddressByNameByCache(String _name) {
        final Function function =
                new Function(
                        FUNC_GETADDRESSBYNAMEBYCACHE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getMaxStep(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_GETMAXSTEP,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> getTransactionInfo(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_GETTRANSACTIONINFO,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addPath(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addPath(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addPathSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getAddPathInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<TransactionReceipt> startTransaction(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_STARTTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void startTransaction(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_STARTTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String startTransactionSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_STARTTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getStartTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_STARTTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public Tuple1<List<String>> getStartTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_STARTTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<TransactionReceipt> deletePathList(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void deletePathList(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String deletePathListSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getDeletePathListInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    @Deprecated
    public static WeCrossProxy load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new WeCrossProxy(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static WeCrossProxy load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new WeCrossProxy(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static WeCrossProxy load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new WeCrossProxy(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static WeCrossProxy load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return new WeCrossProxy(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<WeCrossProxy> deploy(
            Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                WeCrossProxy.class, web3j, credentials, contractGasProvider, getBinary(), "");
    }

    public static RemoteCall<WeCrossProxy> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                WeCrossProxy.class,
                web3j,
                transactionManager,
                contractGasProvider,
                getBinary(),
                "");
    }

    @Deprecated
    public static RemoteCall<WeCrossProxy> deploy(
            Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(
                WeCrossProxy.class, web3j, credentials, gasPrice, gasLimit, getBinary(), "");
    }

    @Deprecated
    public static RemoteCall<WeCrossProxy> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return deployRemoteCall(
                WeCrossProxy.class, web3j, transactionManager, gasPrice, gasLimit, getBinary(), "");
    }
}
