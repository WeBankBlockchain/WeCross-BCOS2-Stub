package com.webank.wecross.stub.bcos.performance.hellowecross.proxy;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.crypto.EncryptType;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class WeCrossProxy extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "0085013567ffffffffffffffff811115618fa457600080fd5b618fb087828801618b98565b945050602085013567ffffffffffffffff811115618fcd57600080fd5b618fd987828801618b98565b935050604085013567ffffffffffffffff811115618ff657600080fd5b61900287828801618b98565b925050606085013567ffffffffffffffff81111561901f57600080fd5b61902b87828801618ad8565b91505092959194509250565b6000806000806080858703121561904d57600080fd5b600085013567ffffffffffffffff81111561906757600080fd5b61907387828801618b98565b945050602085013567ffffffffffffffff81111561909057600080fd5b61909c87828801618b98565b935050604085013567ffffffffffffffff8111156190b957600080fd5b6190c587828801618b98565b925050606085013567ffffffffffffffff8111156190e257600080fd5b6190ee87828801618b98565b91505092959194509250565b600080600080600060a0868803121561911257600080fd5b600086013567ffffffffffffffff81111561912c57600080fd5b61913888828901618b98565b955050602061914988828901618c44565b945050604086013567ffffffffffffffff81111561916657600080fd5b61917288828901618b98565b935050606086013567ffffffffffffffff81111561918f57600080fd5b61919b88828901618b98565b925050608086013567ffffffffffffffff8111156191b857600080fd5b6191c488828901618ad8565b9150509295509295909350565b6191da81619887565b82525050565b60006191eb8261984e565b8084526020840193508360208202850161920485619841565b60005b8481101561923d57838303885261921f8383516192ba565b925061922a8261987a565b9150602088019750600181019050619207565b508196508694505050505092915050565b600061925982619859565b80845261926d8160208601602086016198f8565b6192768161992b565b602085010191505092915050565b600061928f8261986f565b8084526192a38160208601602086016198f8565b6192ac8161992b565b602085010191505092915050565b60006192c582619864565b8084526192d98160208601602086016198f8565b6192e28161992b565b602085010191505092915050565b6000601f82527f7472616e73616374696f6e20686173206265656e20726f6c6c65646261636b006020830152604082019050919050565b6000601e82527f7472616e73616374696f6e20686173206265656e20636f6d6d697474656400006020830152604082019050919050565b6000601582527f7472616e73616374696f6e206e6f7420666f756e6400000000000000000000006020830152604082019050919050565b6000601682527f6465706c6f7920636f6e7472616374206661696c6564000000000000000000006020830152604082019050919050565b6000601e82527f64656c657465206e6f6e6578697374656e74207472616e73616374696f6e00006020830152604082019050919050565b6000602182527f7365712073686f756c642062652067726561746572207468616e206265666f7260208301527f65000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601182527f696e76616c696420617267756d656e74730000000000000000000000000000006020830152604082019050919050565b6000601d82527f746865206e616d6527732061646472657373206e6f742065786973742e0000006020830152604082019050919050565b6000601c82527f64656c65746520756e6d617463686564207472616e73616374696f6e000000006020830152604082019050919050565b61950e816198b9565b82525050565b600060208201905061952960008301846191d1565b92915050565b6000602082019050818103600083015261954981846191e0565b905092915050565b6000602082019050818103600083015261956b818461924e565b905092915050565b6000602082019050818103600083015261958d8184619284565b905092915050565b600060408201905081810360008301526195af8185619284565b905081810360208301526195c38184619284565b90509392505050565b600060808201905081810360008301526195e68187619284565b905081810360208301526195fa8186619284565b9050818103604083015261960e8185619284565b905081810360608301526196228184619284565b905095945050505050565b60006020820190508181036000830152619646816192f0565b9050919050565b6000602082019050818103600083015261966681619327565b9050919050565b600060208201905081810360008301526196868161935e565b9050919050565b600060208201905081810360008301526196a681619395565b9050919050565b600060208201905081810360008301526196c6816193cc565b9050919050565b600060208201905081810360008301526196e681619403565b9050919050565b6000602082019050818103600083015261970681619460565b9050919050565b6000602082019050818103600083015261972681619497565b9050919050565b60006020820190508181036000830152619746816194ce565b9050919050565b60006020820190506197626000830184619505565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561978b57600080fd5b8060405250919050565b600067ffffffffffffffff8211156197ac57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156197d457600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561980057600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561982c57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600061989282619899565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006198ce82619899565b9050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156199165780820151818401526020810190506198fb565b83811115619925576000848401525b50505050565b6000601f19601f830116905091905056fe206973206c6f636b656420627920756e66696e6973686564207472616e73616374696f6e3a20a265627a7a723058207f5ae35b674ce9bc084d29b2ca55b405bddfe6bdea8751aaa60757e59b5b79616c6578706572696d656e74616cf50037"
    };

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_argsWithMethodId\",\"type\":\"bytes\"}],\"name\":\"sendTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"commitTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"string\"},{\"name\":\"_bin\",\"type\":\"bytes\"},{\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"deployContractWithRegisterCNS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_argsWithMethodId\",\"type\":\"bytes\"}],\"name\":\"sendTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_argsWithMethodId\",\"type\":\"bytes\"}],\"name\":\"constantCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"setMaxStep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"getPaths\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"rollbackTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"string\"},{\"name\":\"_addr\",\"type\":\"string\"},{\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"registerCNS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionID\",\"type\":\"string\"},{\"name\":\"_seq\",\"type\":\"uint256\"},{\"name\":\"_path\",\"type\":\"string\"},{\"name\":\"_func\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"sendTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bin\",\"type\":\"bytes\"}],\"name\":\"deployContract\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"selectByName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"}],\"name\":\"selectByNameAndVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"getVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"rollbackAndDeleteTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestTransactionInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_str\",\"type\":\"string\"}],\"name\":\"stringToUint256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFinishedTransactionIDs\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionID\",\"type\":\"string\"},{\"name\":\"_path\",\"type\":\"string\"},{\"name\":\"_func\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"constantCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getAddressByNameByCache\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"getMaxStep\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"getTransactionInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"addPath\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"startTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllTransactionIDs\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"deletePathList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"
    };

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "22736571223a0000000000000000000000000000000000000000000000000081525060070187805190602001908083835b602083101515617fe15780518252602082019150602081019050602083039250617fbc565b6001836020036101000a038019825116818451168082178552505050505050905001807f2c00000000000000000000000000000000000000000000000000000000000000815250600101807f22636f6e7472616374223a000000000000000000000000000000000000000000815250600b01807f220000000000000000000000000000000000000000000000000000000000000081525060010186805190602001908083835b6020831015156180ac5780518252602082019150602081019050602083039250618087565b6001836020036101000a038019825116818451168082178552505050505050905001807f222c000000000000000000000000000000000000000000000000000000000000815250600201807f2270617468223a00000000000000000000000000000000000000000000000000815250600701807f220000000000000000000000000000000000000000000000000000000000000081525060010185805190602001908083835b6020831015156181775780518252602082019150602081019050602083039250618152565b6001836020036101000a038019825116818451168082178552505050505050905001807f222c000000000000000000000000000000000000000000000000000000000000815250600201807f2274696d657374616d70223a0000000000000000000000000000000000000000815250600c01807f220000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b602083101515618242578051825260208201915060208101905060208303925061821d565b6001836020036101000a038019825116818451168082178552505050505050905001807f222c000000000000000000000000000000000000000000000000000000000000815250600201807f2266756e63223a00000000000000000000000000000000000000000000000000815250600701807f220000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b60208310151561830d57805182526020820191506020810190506020830392506182e8565b6001836020036101000a038019825116818451168082178552505050505050905001807f222c000000000000000000000000000000000000000000000000000000000000815250600201807f2261726773223a00000000000000000000000000000000000000000000000000815250600701807f220000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b6020831015156183d857805182526020820191506020810190506020830392506183b3565b6001836020036101000a038019825116818451168082178552505050505050905001807f227d0000000000000000000000000000000000000000000000000000000000008152506002019650505050505050604051602081830303815290604052905092915050565b60606000825190506060600282026040519080825280601f01601f1916602001820160405280156184815781602001600182028038833980820191505090505b50905060008090505b8281101561866157600085828151811015156184a257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002905060006010827f0100000000000000000000000000000000000000000000000000000000000000900460ff1681151561852357fe5b047f01000000000000000000000000000000000000000000000000000000000000000290506000817f01000000000000000000000000000000000000000000000000000000000000009004601002837f01000000000000000000000000000000000000000000000000000000000000009004037f01000000000000000000000000000000000000000000000000000000000000000290506185c382617d98565b85600286028151811015156185d457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061860d81617d98565b856001600287020181518110151561862157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050808060010191505061848a565b508092505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106186ad57805160ff19168380011785556186db565b828001600101855582156186db579182015b828111156186da5782518255916020019190600101906186bf565b5b5090506186e891906189bb565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061872d57805160ff191683800117855561875b565b8280016001018555821561875b579182015b8281111561875a57825182559160200191906001019061873f565b5b50905061876891906189bb565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106187ad57805160ff19168380011785556187db565b828001600101855582156187db579182015b828111156187da5782518255916020019190600101906187bf565b5b5090506187e891906189bb565b5090565b82805482825590600052602060002090810192821561883b579160200282015b8281111561883a57825182908051906020019061882a92919061866c565b509160200191906001019061880c565b5b50905061884891906189e0565b5090565b8280548282559060005260206000209081019282156188c5579160200282015b828111156188c45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061886c565b5b5090506188d29190618a0c565b5090565b828054828255906000526020600020908101928215618912579160200282015b828111156189115782518255916020019190600101906188f6565b5b50905061891f91906189bb565b5090565b81548183558181111561894a5781836000526020600020918201910161894991906189e0565b5b505050565b50805460018160011615610100020316600290046000825580601f106189755750618994565b601f01602090049060005260206000209081019061899391906189bb565b5b50565b61012060405190810160405280600990602082028038833980820191505090505090565b6189dd91905b808211156189d95760008160009055506001016189c1565b5090565b90565b618a0991905b80821115618a0557600081816189fc919061894f565b506001016189e6565b5090565b90565b618a4c91905b80821115618a4857600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101618a12565b5090565b90565b6000618a5b82356198c4565b905092915050565b600082601f8301121515618a7657600080fd5b8135618a89618a8482619796565b619769565b9150818183526020840193506020810190508360005b83811015618acf5781358601618ab58882618b43565b845260208401935060208301925050600181019050618a9f565b5050505092915050565b600082601f8301121515618aec57600080fd5b8135618aff618afa826197be565b619769565b91508082526020830160208301858383011115618b1b57600080fd5b618b268382846198ea565b50505092915050565b6000618b3b82516198d6565b905092915050565b600082601f8301121515618b5657600080fd5b8135618b69618b64826197ea565b619769565b91508082526020830160208301858383011115618b8557600080fd5b618b908382846198ea565b50505092915050565b600082601f8301121515618bac57600080fd5b8135618bbf618bba82619816565b619769565b91508082526020830160208301858383011115618bdb57600080fd5b618be68382846198ea565b50505092915050565b600082601f8301121515618c0257600080fd5b8151618c15618c1082619816565b619769565b91508082526020830160208301858383011115618c3157600080fd5b618c3c8382846198f9565b50505092915050565b6000618c5182356198e0565b905092915050565b60008060408385031215618c6c57600080fd5b6000618c7a85828601618a4f565b925050602083013567ffffffffffffffff811115618c9757600080fd5b618ca385828601618ad9565b9150509250929050565b600060208284031215618cbf57600080fd5b600082013567ffffffffffffffff811115618cd957600080fd5b618ce584828501618a63565b91505092915050565b600060208284031215618d0057600080fd5b600082013567ffffffffffffffff811115618d1a57600080fd5b618d2684828501618ad9565b91505092915050565b600060208284031215618d4157600080fd5b6000618d4f84828501618b2f565b91505092915050565b600060208284031215618d6a57600080fd5b600082013567ffffffffffffffff811115618d8457600080fd5b618d9084828501618b99565b91505092915050565b600060208284031215618dab57600080fd5b600082015167ffffffffffffffff811115618dc557600080fd5b618dd184828501618bef565b91505092915050565b60008060408385031215618ded57600080fd5b600083013567ffffffffffffffff811115618e0757600080fd5b618e1385828601618b99565b925050602083013567ffffffffffffffff811115618e3057600080fd5b618e3c85828601618ad9565b9150509250929050565b60008060408385031215618e5957600080fd5b600083013567ffffffffffffffff811115618e7357600080fd5b618e7f85828601618b99565b925050602083013567ffffffffffffffff811115618e9c57600080fd5b618ea885828601618b99565b9150509250929050565b60008060008060808587031215618ec857600080fd5b600085013567ffffffffffffffff811115618ee257600080fd5b618eee87828801618b99565b945050602085013567ffffffffffffffff811115618f0b57600080fd5b618f1787828801618b99565b935050604085013567ffffffffffffffff811115618f3457600080fd5b618f4087828801618ad9565b925050606085013567ffffffffffffffff811115618f5d57600080fd5b618f6987828801618b99565b91505092959194509250565b60008060008060808587031215618f8b57600080fd5b",
        "600085013567ffffffffffffffff811115618fa557600080fd5b618fb187828801618b99565b945050602085013567ffffffffffffffff811115618fce57600080fd5b618fda87828801618b99565b935050604085013567ffffffffffffffff811115618ff757600080fd5b61900387828801618b99565b925050606085013567ffffffffffffffff81111561902057600080fd5b61902c87828801618ad9565b91505092959194509250565b6000806000806080858703121561904e57600080fd5b600085013567ffffffffffffffff81111561906857600080fd5b61907487828801618b99565b945050602085013567ffffffffffffffff81111561909157600080fd5b61909d87828801618b99565b935050604085013567ffffffffffffffff8111156190ba57600080fd5b6190c687828801618b99565b925050606085013567ffffffffffffffff8111156190e357600080fd5b6190ef87828801618b99565b91505092959194509250565b600080600080600060a0868803121561911357600080fd5b600086013567ffffffffffffffff81111561912d57600080fd5b61913988828901618b99565b955050602061914a88828901618c45565b945050604086013567ffffffffffffffff81111561916757600080fd5b61917388828901618b99565b935050606086013567ffffffffffffffff81111561919057600080fd5b61919c88828901618b99565b925050608086013567ffffffffffffffff8111156191b957600080fd5b6191c588828901618ad9565b9150509295509295909350565b6191db81619888565b82525050565b60006191ec8261984f565b8084526020840193508360208202850161920585619842565b60005b8481101561923e5783830388526192208383516192bb565b925061922b8261987b565b9150602088019750600181019050619208565b508196508694505050505092915050565b600061925a8261985a565b80845261926e8160208601602086016198f9565b6192778161992c565b602085010191505092915050565b600061929082619870565b8084526192a48160208601602086016198f9565b6192ad8161992c565b602085010191505092915050565b60006192c682619865565b8084526192da8160208601602086016198f9565b6192e38161992c565b602085010191505092915050565b6000601e82527f7472616e73616374696f6e20686173206265656e20636f6d6d697474656400006020830152604082019050919050565b6000601d82527f746865206e616d6527732061646472657373206e6f742065786973742e0000006020830152604082019050919050565b6000601182527f696e76616c696420617267756d656e74730000000000000000000000000000006020830152604082019050919050565b6000601f82527f7472616e73616374696f6e20686173206265656e20726f6c6c65646261636b006020830152604082019050919050565b6000601682527f6465706c6f7920636f6e7472616374206661696c6564000000000000000000006020830152604082019050919050565b6000601e82527f64656c657465206e6f6e6578697374656e74207472616e73616374696f6e00006020830152604082019050919050565b6000602182527f7365712073686f756c642062652067726561746572207468616e206265666f7260208301527f65000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601c82527f64656c65746520756e6d617463686564207472616e73616374696f6e000000006020830152604082019050919050565b6000601582527f7472616e73616374696f6e206e6f7420666f756e6400000000000000000000006020830152604082019050919050565b61950f816198ba565b82525050565b600060208201905061952a60008301846191d2565b92915050565b6000602082019050818103600083015261954a81846191e1565b905092915050565b6000602082019050818103600083015261956c818461924f565b905092915050565b6000602082019050818103600083015261958e8184619285565b905092915050565b600060408201905081810360008301526195b08185619285565b905081810360208301526195c48184619285565b90509392505050565b600060808201905081810360008301526195e78187619285565b905081810360208301526195fb8186619285565b9050818103604083015261960f8185619285565b905081810360608301526196238184619285565b905095945050505050565b60006020820190508181036000830152619647816192f1565b9050919050565b6000602082019050818103600083015261966781619328565b9050919050565b600060208201905081810360008301526196878161935f565b9050919050565b600060208201905081810360008301526196a781619396565b9050919050565b600060208201905081810360008301526196c7816193cd565b9050919050565b600060208201905081810360008301526196e781619404565b9050919050565b600060208201905081810360008301526197078161943b565b9050919050565b6000602082019050818103600083015261972781619498565b9050919050565b60006020820190508181036000830152619747816194cf565b9050919050565b60006020820190506197636000830184619506565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561978c57600080fd5b8060405250919050565b600067ffffffffffffffff8211156197ad57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156197d557600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561980157600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561982d57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b60006198938261989a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006198cf8261989a565b9050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156199175780820151818401526020810190506198fc565b83811115619926576000848401525b50505050565b6000601f19601f830116905091905056fe206973206c6f636b656420627920756e66696e6973686564207472616e73616374696f6e3a20a265627a7a723058206a1388db0595ca62a42a6eb4e7cbd470f4ce0fe437c35e3b9e2c386e874f5bb16c6578706572696d656e74616cf50037"
    };

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String FUNC_SENDTRANSACTION = "sendTransaction";

    public static final String FUNC_COMMITTRANSACTION = "commitTransaction";

    public static final String FUNC_DEPLOYCONTRACTWITHREGISTERCNS = "deployContractWithRegisterCNS";

    public static final String FUNC_CONSTANTCALL = "constantCall";

    public static final String FUNC_SETMAXSTEP = "setMaxStep";

    public static final String FUNC_GETPATHS = "getPaths";

    public static final String FUNC_ROLLBACKTRANSACTION = "rollbackTransaction";

    public static final String FUNC_GETLATESTTRANSACTION = "getLatestTransaction";

    public static final String FUNC_REGISTERCNS = "registerCNS";

    public static final String FUNC_DEPLOYCONTRACT = "deployContract";

    public static final String FUNC_SELECTBYNAME = "selectByName";

    public static final String FUNC_SELECTBYNAMEANDVERSION = "selectByNameAndVersion";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_ROLLBACKANDDELETETRANSACTION = "rollbackAndDeleteTransaction";

    public static final String FUNC_GETLATESTTRANSACTIONINFO = "getLatestTransactionInfo";

    public static final String FUNC_STRINGTOUINT256 = "stringToUint256";

    public static final String FUNC_GETFINISHEDTRANSACTIONIDS = "getFinishedTransactionIDs";

    public static final String FUNC_GETADDRESSBYNAMEBYCACHE = "getAddressByNameByCache";

    public static final String FUNC_GETMAXSTEP = "getMaxStep";

    public static final String FUNC_GETTRANSACTIONINFO = "getTransactionInfo";

    public static final String FUNC_ADDPATH = "addPath";

    public static final String FUNC_STARTTRANSACTION = "startTransaction";

    public static final String FUNC_GETALLTRANSACTIONIDS = "getAllTransactionIDs";

    public static final String FUNC_DELETEPATHLIST = "deletePathList";

    @Deprecated
    protected WeCrossProxy(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected WeCrossProxy(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected WeCrossProxy(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected WeCrossProxy(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static String getBinary() {
        return (EncryptType.encryptType == EncryptType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> sendTransaction(String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void sendTransaction(
            String _name, byte[] _argsWithMethodId, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String sendTransactionSeq(String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, byte[]> getSendTransactionStringBytesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple2<String, byte[]>(
                (String) results.get(0).getValue(), (byte[]) results.get(1).getValue());
    }

    public Tuple1<byte[]> getSendTransactionStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> commitTransaction(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_COMMITTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void commitTransaction(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_COMMITTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String commitTransactionSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_COMMITTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getCommitTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_COMMITTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public Tuple1<List<String>> getCommitTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_COMMITTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<TransactionReceipt> deployContractWithRegisterCNS(
            String _name, String _version, byte[] _bin, String _abi) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_version),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_bin),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void deployContractWithRegisterCNS(
            String _name,
            String _version,
            byte[] _bin,
            String _abi,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_version),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_bin),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String deployContractWithRegisterCNSSeq(
            String _name, String _version, byte[] _bin, String _abi) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_version),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_bin),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, byte[], String> getDeployContractWithRegisterCNSInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERCNS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple4<String, String, byte[], String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (byte[]) results.get(2).getValue(),
                (String) results.get(3).getValue());
    }

    public Tuple1<String> getDeployContractWithRegisterCNSOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERCNS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> sendTransactionByAddress(
            String _addr, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void sendTransactionByAddress(
            String _addr, byte[] _argsWithMethodId, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String sendTransactionByAddressSeq(String _addr, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, byte[]> getSendTransactionAddressBytesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple2<String, byte[]>(
                (String) results.get(0).getValue(), (byte[]) results.get(1).getValue());
    }

    public Tuple1<byte[]> getSendTransactionAddressBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<byte[]> constantCall(String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> setMaxStep(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_SETMAXSTEP,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setMaxStep(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETMAXSTEP,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setMaxStepSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_SETMAXSTEP,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getSetMaxStepInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETMAXSTEP,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<List> getPaths(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_GETPATHS,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> rollbackTransaction(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void rollbackTransaction(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String rollbackTransactionSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getRollbackTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ROLLBACKTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public Tuple1<List<String>> getRollbackTransactionOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_ROLLBACKTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<String> getLatestTransaction() {
        final Function function =
                new Function(
                        FUNC_GETLATESTTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> registerCNS(
            String _name, String _version, String _addr, String _abi) {
        final Function function =
                new Function(
                        FUNC_REGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_version),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerCNS(
            String _name,
            String _version,
            String _addr,
            String _abi,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_REGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_version),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerCNSSeq(String _name, String _version, String _addr, String _abi) {
        final Function function =
                new Function(
                        FUNC_REGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_version),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, String, String> getRegisterCNSInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REGISTERCNS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple4<String, String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue());
    }

    public RemoteCall<TransactionReceipt> sendTransaction(
            String _transactionID, BigInteger _seq, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_seq),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void sendTransaction(
            String _transactionID,
            BigInteger _seq,
            String _path,
            String _func,
            byte[] _args,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_seq),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String sendTransactionSeq(
            String _transactionID, BigInteger _seq, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_seq),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple5<String, BigInteger, String, String, byte[]>
            getSendTransactionStringUint256StringStringBytesInput(
                    TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple5<String, BigInteger, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (byte[]) results.get(4).getValue());
    }

    public Tuple1<byte[]> getSendTransactionStringUint256StringStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> deployContract(byte[] bin) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(bin)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void deployContract(byte[] bin, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(bin)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String deployContractSeq(byte[] bin) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(bin)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<byte[]> getDeployContractInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public Tuple1<String> getDeployContractOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public RemoteCall<String> selectByName(String name) {
        final Function function =
                new Function(
                        FUNC_SELECTBYNAME,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> selectByNameAndVersion(String name, String version) {
        final Function function =
                new Function(
                        FUNC_SELECTBYNAMEANDVERSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(version)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getVersion(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_GETVERSION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> rollbackAndDeleteTransaction(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETETRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void rollbackAndDeleteTransaction(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETETRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String rollbackAndDeleteTransactionSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETETRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getRollbackAndDeleteTransactionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETETRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public Tuple1<List<String>> getRollbackAndDeleteTransactionOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETETRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<List> getLatestTransactionInfo() {
        final Function function =
                new Function(
                        FUNC_GETLATESTTRANSACTIONINFO,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> stringToUint256(String _str) {
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_str)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> getFinishedTransactionIDs() {
        final Function function =
                new Function(
                        FUNC_GETFINISHEDTRANSACTIONIDS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<byte[]> constantCall(
            String _transactionID, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<String> getAddressByNameByCache(String _name) {
        final Function function =
                new Function(
                        FUNC_GETADDRESSBYNAMEBYCACHE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getMaxStep(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_GETMAXSTEP,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> getTransactionInfo(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_GETTRANSACTIONINFO,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addPath(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addPath(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addPathSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getAddPathInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<TransactionReceipt> startTransaction(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_STARTTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void startTransaction(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_STARTTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String startTransactionSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_STARTTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getStartTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_STARTTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public Tuple1<List<String>> getStartTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_STARTTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<List> getAllTransactionIDs() {
        final Function function =
                new Function(
                        FUNC_GETALLTRANSACTIONIDS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> deletePathList(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void deletePathList(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String deletePathListSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getDeletePathListInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    @Deprecated
    public static WeCrossProxy load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new WeCrossProxy(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static WeCrossProxy load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new WeCrossProxy(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static WeCrossProxy load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new WeCrossProxy(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static WeCrossProxy load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return new WeCrossProxy(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<WeCrossProxy> deploy(
            Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                WeCrossProxy.class, web3j, credentials, contractGasProvider, getBinary(), "");
    }

    public static RemoteCall<WeCrossProxy> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                WeCrossProxy.class,
                web3j,
                transactionManager,
                contractGasProvider,
                getBinary(),
                "");
    }

    @Deprecated
    public static RemoteCall<WeCrossProxy> deploy(
            Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(
                WeCrossProxy.class, web3j, credentials, gasPrice, gasLimit, getBinary(), "");
    }

    @Deprecated
    public static RemoteCall<WeCrossProxy> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return deployRemoteCall(
                WeCrossProxy.class, web3j, transactionManager, gasPrice, gasLimit, getBinary(), "");
    }
}
