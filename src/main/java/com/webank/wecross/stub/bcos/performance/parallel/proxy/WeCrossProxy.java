package com.webank.wecross.stub.bcos.performance.parallel.proxy;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.crypto.EncryptType;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tuples.generated.Tuple6;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class WeCrossProxy extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "ffffffffffffff1611155b15616f6457605782039150616ffe565b60418273ffffffffffffffffffffffffffffffffffffffff1610158015616fa2575060468273ffffffffffffffffffffffffffffffffffffffff1611155b15616fb257603782039150616ffd565b60308273ffffffffffffffffffffffffffffffffffffffff1610158015616ff0575060398273ffffffffffffffffffffffffffffffffffffffff1611155b15616ffc576030820391505b5b5b81601084020184019350600281019050616d19565b50829350505050919050565b606080602060ff166040519080825280601f01601f1916602001820160405280156170595781602001600182028038833980820191505090505b5090506000602060ff16905060008090505b818110156170ef57848160208110151561708157fe5b1a7f01000000000000000000000000000000000000000000000000000000000000000283828151811015156170b257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061706b565b508192505050919050565b606061710582615e55565b6171128460400151614cdb565b84600001516171248660200151615e55565b866060015161713688608001516175f6565b60405160200180807f7b22736571223a0000000000000000000000000000000000000000000000000081525060070187805190602001908083835b6020831015156171965780518252602082019150602081019050602083039250617171565b6001836020036101000a038019825116818451168082178552505050505050905001807f2c00000000000000000000000000000000000000000000000000000000000000815250600101807f22636f6e7472616374223a000000000000000000000000000000000000000000815250600b01807f220000000000000000000000000000000000000000000000000000000000000081525060010186805190602001908083835b602083101515617261578051825260208201915060208101905060208303925061723c565b6001836020036101000a038019825116818451168082178552505050505050905001807f222c000000000000000000000000000000000000000000000000000000000000815250600201807f2270617468223a00000000000000000000000000000000000000000000000000815250600701807f220000000000000000000000000000000000000000000000000000000000000081525060010185805190602001908083835b60208310151561732c5780518252602082019150602081019050602083039250617307565b6001836020036101000a038019825116818451168082178552505050505050905001807f222c000000000000000000000000000000000000000000000000000000000000815250600201807f2274696d657374616d70223a0000000000000000000000000000000000000000815250600c01807f220000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b6020831015156173f757805182526020820191506020810190506020830392506173d2565b6001836020036101000a038019825116818451168082178552505050505050905001807f222c000000000000000000000000000000000000000000000000000000000000815250600201807f2266756e63223a00000000000000000000000000000000000000000000000000815250600701807f220000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b6020831015156174c2578051825260208201915060208101905060208303925061749d565b6001836020036101000a038019825116818451168082178552505050505050905001807f222c000000000000000000000000000000000000000000000000000000000000815250600201807f2261726773223a00000000000000000000000000000000000000000000000000815250600701807f220000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b60208310151561758d5780518252602082019150602081019050602083039250617568565b6001836020036101000a038019825116818451168082178552505050505050905001807f227d0000000000000000000000000000000000000000000000000000000000008152506002019650505050505050604051602081830303815290604052905092915050565b60606000825190506060600282026040519080825280601f01601f1916602001820160405280156176365781602001600182028038833980820191505090505b50905060008090505b82811015617816576000858281518110151561765757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002905060006010827f0100000000000000000000000000000000000000000000000000000000000000900460ff168115156176d857fe5b047f01000000000000000000000000000000000000000000000000000000000000000290506000817f01000000000000000000000000000000000000000000000000000000000000009004601002837f01000000000000000000000000000000000000000000000000000000000000009004037f0100000000000000000000000000000000000000000000000000000000000000029050617778826167f4565b856002860281518110151561778957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506177c2816167f4565b85600160028702018151811015156177d657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050808060010191505061763f565b508092505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061786257805160ff1916838001178555617890565b82800160010185558215617890579182015b8281111561788f578251825591602001919060010190617874565b5b50905061789d9190617b70565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106178e257805160ff1916838001178555617910565b82800160010185558215617910579182015b8281111561790f5782518255916020019190600101906178f4565b5b50905061791d9190617b70565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061796257805160ff1916838001178555617990565b82800160010185558215617990579182015b8281111561798f578251825591602001919060010190617974565b5b50905061799d9190617b70565b5090565b8280548282559060005260206000209081019282156179f0579160200282015b828111156179ef5782518290805190602001906179df929190617821565b50916020019190600101906179c1565b5b5090506179fd9190617b95565b5090565b828054828255906000526020600020908101928215617a7a579160200282015b82811115617a795782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190617a21565b5b509050617a879190617bc1565b5090565b828054828255906000526020600020908101928215617ac7579160200282015b82811115617ac6578251825591602001919060010190617aab565b5b509050617ad49190617b70565b5090565b815481835581811115617aff57818360005260206000209182019101617afe9190617b95565b5b505050565b50805460018160011615610100020316600290046000825580601f10617b2a5750617b49565b601f016020900490600052602060002090810190617b489190617b70565b5b50565b61012060405190810160405280600990602082028038833980820191505090505090565b617b9291905b80821115617b8e576000816000905550600101617b76565b5090565b90565b617bbe91905b80821115617bba5760008181617bb19190617b04565b50600101617b9b565b5090565b90565b617c0191905b80821115617bfd57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101617bc7565b5090565b90565b6000617c10823561908e565b905092915050565b600082601f8301121515617c2b57600080fd5b8135617c3e617c3982618f60565b618f33565b9150818183526020840193506020810190508360005b83811015617c845781358601617c6a8882617cf8565b845260208401935060208301925050600181019050617c54565b5050505092915050565b600082601f8301121515617ca157600080fd5b8135617cb4617caf82618f88565b618f33565b91508082526020830160208301858383011115617cd057600080fd5b617cdb8382846190b4565b50505092915050565b6000617cf082516190a0565b905092915050565b600082601f8301121515617d0b57600080fd5b8135617d1e617d1982618fb4565b618f33565b91508082526020830160208301858383011115617d3a57600080fd5b617d458382846190b4565b50505092915050565b600082601f8301121515617d6157600080fd5b8135617d74617d6f82618fe0565b618f33565b91508082526020830160208301858383011115617d9057600080fd5b617d9b8382846190b4565b50505092915050565b600082601f8301121515617db757600080fd5b8151617dca617dc582618fe0565b618f33565b91508082526020830160208301858383011115617de657600080fd5b617df18382846190c3565b50505092915050565b6000617e0682356190aa565b905092915050565b600080600060608486031215617e2357600080fd5b6000617e3186828701617c04565b935050602084013567ffffffffffffffff811115617e4e57600080fd5b617e5a86828701617d4e565b925050604084013567ffffffffffffffff811115617e7757600080fd5b617e8386828701617c8e565b9150509250925092565b600060208284031215617e9f57600080fd5b600082013567ffffffffffffffff811115617eb957600080fd5b617ec584828501617c18565b91505092915050565b600060208284031215617ee057600080fd5b600082013567ffffffffffffffff811115617efa57600080fd5b617f0684828501617c8e565b91505092915050565b600060208284031215617f2157600080fd5b6000617f2f84828501617ce4565b91505092915050565b600060208284031215617f4a57600080fd",
        "5b600082013567ffffffffffffffff811115617f6457600080fd5b617f7084828501617d4e565b91505092915050565b600060208284031215617f8b57600080fd5b600082015167ffffffffffffffff811115617fa557600080fd5b617fb184828501617da4565b91505092915050565b60008060008060808587031215617fd057600080fd5b600085013567ffffffffffffffff811115617fea57600080fd5b617ff687828801617d4e565b945050602061800787828801617c04565b935050604085013567ffffffffffffffff81111561802457600080fd5b61803087828801617d4e565b925050606085013567ffffffffffffffff81111561804d57600080fd5b61805987828801617c8e565b91505092959194509250565b6000806040838503121561807857600080fd5b600083013567ffffffffffffffff81111561809257600080fd5b61809e85828601617d4e565b925050602083013567ffffffffffffffff8111156180bb57600080fd5b6180c785828601617d4e565b9150509250929050565b600080600080600060a086880312156180e957600080fd5b600086013567ffffffffffffffff81111561810357600080fd5b61810f88828901617d4e565b955050602086013567ffffffffffffffff81111561812c57600080fd5b61813888828901617d4e565b945050604061814988828901617c04565b935050606086013567ffffffffffffffff81111561816657600080fd5b61817288828901617d4e565b925050608086013567ffffffffffffffff81111561818f57600080fd5b61819b88828901617c8e565b9150509295509295909350565b600080600080608085870312156181be57600080fd5b600085013567ffffffffffffffff8111156181d857600080fd5b6181e487828801617d4e565b945050602085013567ffffffffffffffff81111561820157600080fd5b61820d87828801617d4e565b935050604085013567ffffffffffffffff81111561822a57600080fd5b61823687828801617c8e565b925050606085013567ffffffffffffffff81111561825357600080fd5b61825f87828801617d4e565b91505092959194509250565b6000806000806080858703121561828157600080fd5b600085013567ffffffffffffffff81111561829b57600080fd5b6182a787828801617d4e565b945050602085013567ffffffffffffffff8111156182c457600080fd5b6182d087828801617d4e565b935050604085013567ffffffffffffffff8111156182ed57600080fd5b6182f987828801617d4e565b925050606085013567ffffffffffffffff81111561831657600080fd5b61832287828801617c8e565b91505092959194509250565b6000806000806080858703121561834457600080fd5b600085013567ffffffffffffffff81111561835e57600080fd5b61836a87828801617d4e565b945050602085013567ffffffffffffffff81111561838757600080fd5b61839387828801617d4e565b935050604085013567ffffffffffffffff8111156183b057600080fd5b6183bc87828801617d4e565b925050606085013567ffffffffffffffff8111156183d957600080fd5b6183e587828801617d4e565b91505092959194509250565b600080600080600060a0868803121561840957600080fd5b600086013567ffffffffffffffff81111561842357600080fd5b61842f88828901617d4e565b955050602086013567ffffffffffffffff81111561844c57600080fd5b61845888828901617d4e565b945050604086013567ffffffffffffffff81111561847557600080fd5b61848188828901617d4e565b935050606086013567ffffffffffffffff81111561849e57600080fd5b6184aa88828901617d4e565b925050608086013567ffffffffffffffff8111156184c757600080fd5b6184d388828901617c8e565b9150509295509295909350565b60008060008060008060c087890312156184f957600080fd5b600087013567ffffffffffffffff81111561851357600080fd5b61851f89828a01617d4e565b965050602087013567ffffffffffffffff81111561853c57600080fd5b61854889828a01617d4e565b955050604087013567ffffffffffffffff81111561856557600080fd5b61857189828a01617d4e565b945050606087013567ffffffffffffffff81111561858e57600080fd5b61859a89828a01617d4e565b935050608087013567ffffffffffffffff8111156185b757600080fd5b6185c389828a01617d4e565b92505060a087013567ffffffffffffffff8111156185e057600080fd5b6185ec89828a01617c8e565b9150509295509295509295565b6000806040838503121561860c57600080fd5b600083013567ffffffffffffffff81111561862657600080fd5b61863285828601617d4e565b925050602061864385828601617dfa565b9150509250929050565b600080600080600060a0868803121561866557600080fd5b600086013567ffffffffffffffff81111561867f57600080fd5b61868b88828901617d4e565b955050602061869c88828901617dfa565b945050604086013567ffffffffffffffff8111156186b957600080fd5b6186c588828901617d4e565b935050606086013567ffffffffffffffff8111156186e257600080fd5b6186ee88828901617d4e565b925050608086013567ffffffffffffffff81111561870b57600080fd5b61871788828901617c8e565b9150509295509295909350565b61872d81619052565b82525050565b600061873e82619019565b808452602084019350836020820285016187578561900c565b60005b8481101561879057838303885261877283835161880d565b925061877d82619045565b915060208801975060018101905061875a565b508196508694505050505092915050565b60006187ac82619024565b8084526187c08160208601602086016190c3565b6187c9816190f6565b602085010191505092915050565b60006187e28261903a565b8084526187f68160208601602086016190c3565b6187ff816190f6565b602085010191505092915050565b60006188188261902f565b80845261882c8160208601602086016190c3565b618835816190f6565b602085010191505092915050565b6000601382527f726567697374657220636e73206661696c6564000000000000000000000000006020830152604082019050919050565b6000601c82527f43616c6c2074726167657420636f6e7472616374206661696c656421000000006020830152604082019050919050565b6000600e82527f68617320726f6c6c65646261636b0000000000000000000000000000000000006020830152604082019050919050565b6000601182527f756e7265676973746572656420706174680000000000000000000000000000006020830152604082019050919050565b6000601382527f7472616e73616374696f6e2065786973746564000000000000000000000000006020830152604082019050919050565b6000600d82527f6475706c696361746520736571000000000000000000000000000000000000006020830152604082019050919050565b6000601682527f6465706c6f7920636f6e7472616374206661696c6564000000000000000000006020830152604082019050919050565b6000601582527f756e7265676973746572656420636f6e747261637400000000000000000000006020830152604082019050919050565b6000601e82527f64656c657465206e6f6e6578697374656e74207472616e73616374696f6e00006020830152604082019050919050565b6000600d82527f68617320636f6d6d6974746564000000000000000000000000000000000000006020830152604082019050919050565b6000601182527f696e76616c696420617267756d656e74730000000000000000000000000000006020830152604082019050919050565b6000601882527f7472616e73616374696f6e206964206e6f7420666f756e6400000000000000006020830152604082019050919050565b6000602c82527f636f6e7472616374206973206c6f636b656420627920756e66696e697368656460208301527f207472616e73616374696f6e00000000000000000000000000000000000000006040830152606082019050919050565b6000601182527f636f6e747261637420636f6e666c6963740000000000000000000000000000006020830152604082019050919050565b6000601c82527f64656c65746520756e6d617463686564207472616e73616374696f6e000000006020830152604082019050919050565b618bab81619084565b82525050565b6000602082019050618bc66000830184618724565b92915050565b6000604082019050618be16000830185618724565b8181036020830152618bf381846187d7565b90509392505050565b6000606082019050618c116000830186618724565b8181036020830152618c2381856187d7565b9050618c326040830184618ba2565b949350505050565b60006020820190508181036000830152618c548184618733565b905092915050565b60006020820190508181036000830152618c7681846187a1565b905092915050565b60006020820190508181036000830152618c9881846187d7565b905092915050565b60006040820190508181036000830152618cba81856187d7565b90508181036020830152618cce81846187d7565b90509392505050565b60006080820190508181036000830152618cf181876187d7565b90508181036020830152618d0581866187d7565b90508181036040830152618d1981856187d7565b90508181036060830152618d2d81846187d7565b905095945050505050565b60006020820190508181036000830152618d5181618843565b9050919050565b60006020820190508181036000830152618d718161887a565b9050919050565b60006020820190508181036000830152618d91816188b1565b9050919050565b60006020820190508181036000830152618db1816188e8565b9050919050565b60006020820190508181036000830152618dd18161891f565b9050919050565b60006020820190508181036000830152618df181618956565b9050919050565b60006020820190508181036000830152618e118161898d565b9050919050565b60006020820190508181036000830152618e31816189c4565b9050919050565b60006020820190508181036000830152618e51816189fb565b9050919050565b60006020820190508181036000830152618e7181618a32565b9050919050565b60006020820190508181036000830152618e9181618a69565b9050919050565b60006020820190508181036000830152618eb181618aa0565b9050919050565b60006020820190508181036000830152618ed181618ad7565b9050919050565b60006020820190508181036000830152618ef181618b34565b9050919050565b60006020820190508181036000830152618f1181618b6b565b9050919050565b6000602082019050618f2d6000830184618ba2565b92915050565b6000604051905081810181811067ffffffffffffffff",
        "82111715618f5657600080fd5b8060405250919050565b600067ffffffffffffffff821115618f7757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115618f9f57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115618fcb57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115618ff757600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600061905d82619064565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061909982619064565b9050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156190e15780820151818401526020810190506190c6565b838111156190f0576000848401525b50505050565b6000601f19601f830116905091905056fe706172616c6c656c53656e645472616e73616374696f6e42794164647265737328737472696e672c616464726573732c737472696e672c627974657329706172616c6c656c53656e645472616e73616374696f6e28737472696e672c737472696e672c737472696e672c737472696e672c737472696e672c627974657329706172616c6c656c53656e645472616e73616374696f6e42794164647265737328737472696e672c737472696e672c616464726573732c737472696e672c627974657329706172616c6c656c53656e645472616e73616374696f6e28737472696e672c737472696e672c737472696e672c737472696e672c627974657329706172616c6c656c53656e645472616e73616374696f6e28737472696e672c737472696e672c737472696e672c627974657329a265627a7a72305820220be9671deb309ddb846a50f680af1fbeb2010632d4469906891314f1d9ab136c6578706572696d656e74616cf50037"
    };

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"commitTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"bin\",\"type\":\"bytes\"},{\"name\":\"abi\",\"type\":\"string\"}],\"name\":\"deployContractWithRegisterCNS\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"setMaxStep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"},{\"name\":\"criticalSize\",\"type\":\"uint256\"}],\"name\":\"registerParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parallelTag\",\"type\":\"string\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"_func\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"parallelSendTransactionByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"getPaths\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parallelTag0\",\"type\":\"string\"},{\"name\":\"parallelTag1\",\"type\":\"string\"},{\"name\":\"parallelTag2\",\"type\":\"string\"},{\"name\":\"_path\",\"type\":\"string\"},{\"name\":\"_func\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"parallelSendTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"rollbackTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parallelTag0\",\"type\":\"string\"},{\"name\":\"parallelTag1\",\"type\":\"string\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"_func\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"parallelSendTransactionByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parallelTag0\",\"type\":\"string\"},{\"name\":\"parallelTag1\",\"type\":\"string\"},{\"name\":\"_path\",\"type\":\"string\"},{\"name\":\"_func\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"parallelSendTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"addr\",\"type\":\"string\"},{\"name\":\"abi\",\"type\":\"string\"}],\"name\":\"registerCNS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionID\",\"type\":\"string\"},{\"name\":\"_seq\",\"type\":\"uint256\"},{\"name\":\"_path\",\"type\":\"string\"},{\"name\":\"_func\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"sendTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bin\",\"type\":\"bytes\"}],\"name\":\"deployContract\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"}],\"name\":\"unregisterParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"selectByName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"}],\"name\":\"selectByNameAndVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"getVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"rollbackAndDeleteTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestTransactionInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_str\",\"type\":\"string\"}],\"name\":\"stringToUint256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionID\",\"type\":\"string\"},{\"name\":\"_path\",\"type\":\"string\"},{\"name\":\"_func\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"constantCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableParallel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"getMaxStep\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parallelTag\",\"type\":\"string\"},{\"name\":\"_path\",\"type\":\"string\"},{\"name\":\"_func\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"parallelSendTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableParallel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"getTransactionInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"addPath\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"startTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"_func\",\"type\":\"string\"},{\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"sendTransactionByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_args\",\"type\":\"string[]\"}],\"name\":\"deletePathList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"
    };

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "111715618f5557600080fd5b8060405250919050565b600067ffffffffffffffff821115618f7657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115618f9e57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115618fca57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115618ff657600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600061905c82619063565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061909882619063565b9050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156190e05780820151818401526020810190506190c5565b838111156190ef576000848401525b50505050565b6000601f19601f830116905091905056fe706172616c6c656c53656e645472616e73616374696f6e42794164647265737328737472696e672c616464726573732c737472696e672c627974657329706172616c6c656c53656e645472616e73616374696f6e28737472696e672c737472696e672c737472696e672c627974657329706172616c6c656c53656e645472616e73616374696f6e28737472696e672c737472696e672c737472696e672c737472696e672c737472696e672c627974657329706172616c6c656c53656e645472616e73616374696f6e42794164647265737328737472696e672c737472696e672c616464726573732c737472696e672c627974657329706172616c6c656c53656e645472616e73616374696f6e28737472696e672c737472696e672c737472696e672c737472696e672c627974657329a265627a7a723058200f45aec99e92980b244b871ba5aaa79f1cd9858f7e3807ee14f4f65a22c8ca906c6578706572696d656e74616cf50037"
    };

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String FUNC_COMMITTRANSACTION = "commitTransaction";

    public static final String FUNC_DEPLOYCONTRACTWITHREGISTERCNS = "deployContractWithRegisterCNS";

    public static final String FUNC_SETMAXSTEP = "setMaxStep";

    public static final String FUNC_REGISTERPARALLELFUNCTION = "registerParallelFunction";

    public static final String FUNC_PARALLELSENDTRANSACTIONBYADDRESS =
            "parallelSendTransactionByAddress";

    public static final String FUNC_GETPATHS = "getPaths";

    public static final String FUNC_PARALLELSENDTRANSACTION = "parallelSendTransaction";

    public static final String FUNC_ROLLBACKTRANSACTION = "rollbackTransaction";

    public static final String FUNC_GETLATESTTRANSACTION = "getLatestTransaction";

    public static final String FUNC_REGISTERCNS = "registerCNS";

    public static final String FUNC_SENDTRANSACTION = "sendTransaction";

    public static final String FUNC_DEPLOYCONTRACT = "deployContract";

    public static final String FUNC_UNREGISTERPARALLELFUNCTION = "unregisterParallelFunction";

    public static final String FUNC_SELECTBYNAME = "selectByName";

    public static final String FUNC_SELECTBYNAMEANDVERSION = "selectByNameAndVersion";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_ROLLBACKANDDELETETRANSACTION = "rollbackAndDeleteTransaction";

    public static final String FUNC_GETLATESTTRANSACTIONINFO = "getLatestTransactionInfo";

    public static final String FUNC_STRINGTOUINT256 = "stringToUint256";

    public static final String FUNC_CONSTANTCALL = "constantCall";

    public static final String FUNC_ENABLEPARALLEL = "enableParallel";

    public static final String FUNC_GETMAXSTEP = "getMaxStep";

    public static final String FUNC_DISABLEPARALLEL = "disableParallel";

    public static final String FUNC_GETTRANSACTIONINFO = "getTransactionInfo";

    public static final String FUNC_ADDPATH = "addPath";

    public static final String FUNC_STARTTRANSACTION = "startTransaction";

    public static final String FUNC_SENDTRANSACTIONBYADDRESS = "sendTransactionByAddress";

    public static final String FUNC_DELETEPATHLIST = "deletePathList";

    @Deprecated
    protected WeCrossProxy(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected WeCrossProxy(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected WeCrossProxy(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected WeCrossProxy(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static String getBinary() {
        return (EncryptType.encryptType == EncryptType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> commitTransaction(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_COMMITTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void commitTransaction(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_COMMITTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String commitTransactionSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_COMMITTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getCommitTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_COMMITTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public Tuple1<List<String>> getCommitTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_COMMITTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<TransactionReceipt> deployContractWithRegisterCNS(
            String name, String version, byte[] bin, String abi) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(version),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(bin),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void deployContractWithRegisterCNS(
            String name, String version, byte[] bin, String abi, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(version),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(bin),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String deployContractWithRegisterCNSSeq(
            String name, String version, byte[] bin, String abi) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(version),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(bin),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, byte[], String> getDeployContractWithRegisterCNSInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERCNS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple4<String, String, byte[], String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (byte[]) results.get(2).getValue(),
                (String) results.get(3).getValue());
    }

    public Tuple1<String> getDeployContractWithRegisterCNSOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERCNS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> setMaxStep(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_SETMAXSTEP,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setMaxStep(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETMAXSTEP,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setMaxStepSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_SETMAXSTEP,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getSetMaxStepInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETMAXSTEP,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<TransactionReceipt> registerParallelFunction(
            String functionName, BigInteger criticalSize) {
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        criticalSize)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerParallelFunction(
            String functionName, BigInteger criticalSize, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        criticalSize)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerParallelFunctionSeq(String functionName, BigInteger criticalSize) {
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        criticalSize)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getRegisterParallelFunctionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple2<String, BigInteger>(
                (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
    }

    public RemoteCall<TransactionReceipt> parallelSendTransactionByAddress(
            String parallelTag, String addr, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTIONBYADDRESS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void parallelSendTransactionByAddress(
            String parallelTag,
            String addr,
            String _func,
            byte[] _args,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTIONBYADDRESS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String parallelSendTransactionByAddressSeq(
            String parallelTag, String addr, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTIONBYADDRESS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, String, byte[]>
            getParallelSendTransactionByAddressStringAddressStringBytesInput(
                    TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTIONBYADDRESS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple4<String, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (byte[]) results.get(3).getValue());
    }

    public Tuple1<byte[]> getParallelSendTransactionByAddressStringAddressStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTIONBYADDRESS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<List> getPaths(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_GETPATHS,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> parallelSendTransaction(
            String parallelTag0,
            String parallelTag1,
            String parallelTag2,
            String _path,
            String _func,
            byte[] _args) {
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag0),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag1),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag2),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void parallelSendTransaction(
            String parallelTag0,
            String parallelTag1,
            String parallelTag2,
            String _path,
            String _func,
            byte[] _args,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag0),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag1),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag2),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String parallelSendTransactionSeq(
            String parallelTag0,
            String parallelTag1,
            String parallelTag2,
            String _path,
            String _func,
            byte[] _args) {
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag0),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag1),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag2),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple6<String, String, String, String, String, byte[]>
            getParallelSendTransactionStringStringStringStringStringBytesInput(
                    TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple6<String, String, String, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (byte[]) results.get(5).getValue());
    }

    public Tuple1<byte[]> getParallelSendTransactionStringStringStringStringStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> rollbackTransaction(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void rollbackTransaction(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String rollbackTransactionSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getRollbackTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ROLLBACKTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public Tuple1<List<String>> getRollbackTransactionOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_ROLLBACKTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<TransactionReceipt> parallelSendTransactionByAddress(
            String parallelTag0, String parallelTag1, String addr, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTIONBYADDRESS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag0),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag1),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void parallelSendTransactionByAddress(
            String parallelTag0,
            String parallelTag1,
            String addr,
            String _func,
            byte[] _args,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTIONBYADDRESS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag0),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag1),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String parallelSendTransactionByAddressSeq(
            String parallelTag0, String parallelTag1, String addr, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTIONBYADDRESS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag0),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag1),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple5<String, String, String, String, byte[]>
            getParallelSendTransactionByAddressStringStringAddressStringBytesInput(
                    TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTIONBYADDRESS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple5<String, String, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (byte[]) results.get(4).getValue());
    }

    public Tuple1<byte[]> getParallelSendTransactionByAddressStringStringAddressStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTIONBYADDRESS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<String> getLatestTransaction() {
        final Function function =
                new Function(
                        FUNC_GETLATESTTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> parallelSendTransaction(
            String parallelTag0, String parallelTag1, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag0),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag1),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void parallelSendTransaction(
            String parallelTag0,
            String parallelTag1,
            String _path,
            String _func,
            byte[] _args,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag0),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag1),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String parallelSendTransactionSeq(
            String parallelTag0, String parallelTag1, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag0),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag1),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple5<String, String, String, String, byte[]>
            getParallelSendTransactionStringStringStringStringBytesInput(
                    TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple5<String, String, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (byte[]) results.get(4).getValue());
    }

    public Tuple1<byte[]> getParallelSendTransactionStringStringStringStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> registerCNS(
            String name, String version, String addr, String abi) {
        final Function function =
                new Function(
                        FUNC_REGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(version),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerCNS(
            String name, String version, String addr, String abi, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_REGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(version),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerCNSSeq(String name, String version, String addr, String abi) {
        final Function function =
                new Function(
                        FUNC_REGISTERCNS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(version),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(abi)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, String, String> getRegisterCNSInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REGISTERCNS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple4<String, String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue());
    }

    public RemoteCall<TransactionReceipt> sendTransaction(
            String _transactionID, BigInteger _seq, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_seq),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void sendTransaction(
            String _transactionID,
            BigInteger _seq,
            String _path,
            String _func,
            byte[] _args,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_seq),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String sendTransactionSeq(
            String _transactionID, BigInteger _seq, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_seq),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple5<String, BigInteger, String, String, byte[]> getSendTransactionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple5<String, BigInteger, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (byte[]) results.get(4).getValue());
    }

    public Tuple1<byte[]> getSendTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> deployContract(byte[] bin) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(bin)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void deployContract(byte[] bin, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(bin)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String deployContractSeq(byte[] bin) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(bin)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<byte[]> getDeployContractInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public Tuple1<String> getDeployContractOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> unregisterParallelFunction(String functionName) {
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void unregisterParallelFunction(String functionName, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String unregisterParallelFunctionSeq(String functionName) {
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getUnregisterParallelFunctionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public RemoteCall<String> selectByName(String name) {
        final Function function =
                new Function(
                        FUNC_SELECTBYNAME,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> selectByNameAndVersion(String name, String version) {
        final Function function =
                new Function(
                        FUNC_SELECTBYNAMEANDVERSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(version)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getVersion(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_GETVERSION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> rollbackAndDeleteTransaction(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETETRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void rollbackAndDeleteTransaction(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETETRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String rollbackAndDeleteTransactionSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETETRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getRollbackAndDeleteTransactionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETETRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public Tuple1<List<String>> getRollbackAndDeleteTransactionOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETETRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<List> getLatestTransactionInfo() {
        final Function function =
                new Function(
                        FUNC_GETLATESTTRANSACTIONINFO,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> stringToUint256(String _str) {
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_str)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> constantCall(
            String _transactionID, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void constantCall(
            String _transactionID,
            String _path,
            String _func,
            byte[] _args,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String constantCallSeq(String _transactionID, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_transactionID),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, String, byte[]> getConstantCallInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple4<String, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (byte[]) results.get(3).getValue());
    }

    public Tuple1<byte[]> getConstantCallOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> enableParallel() {
        final Function function =
                new Function(
                        FUNC_ENABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void enableParallel(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ENABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String enableParallelSeq() {
        final Function function =
                new Function(
                        FUNC_ENABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<List> getMaxStep(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_GETMAXSTEP,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> parallelSendTransaction(
            String parallelTag, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void parallelSendTransaction(
            String parallelTag,
            String _path,
            String _func,
            byte[] _args,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String parallelSendTransactionSeq(
            String parallelTag, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(parallelTag),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_path),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, String, byte[]>
            getParallelSendTransactionStringStringStringBytesInput(
                    TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple4<String, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (byte[]) results.get(3).getValue());
    }

    public Tuple1<byte[]> getParallelSendTransactionStringStringStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_PARALLELSENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> disableParallel() {
        final Function function =
                new Function(
                        FUNC_DISABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void disableParallel(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DISABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String disableParallelSeq() {
        final Function function =
                new Function(
                        FUNC_DISABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<List> getTransactionInfo(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_GETTRANSACTIONINFO,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addPath(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addPath(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addPathSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getAddPathInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<TransactionReceipt> startTransaction(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_STARTTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void startTransaction(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_STARTTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String startTransactionSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_STARTTRANSACTION,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getStartTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_STARTTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public Tuple1<List<String>> getStartTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_STARTTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public RemoteCall<TransactionReceipt> sendTransactionByAddress(
            String addr, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTIONBYADDRESS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void sendTransactionByAddress(
            String addr, String _func, byte[] _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTIONBYADDRESS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String sendTransactionByAddressSeq(String addr, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTIONBYADDRESS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(addr),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_func),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, String, byte[]> getSendTransactionByAddressInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTIONBYADDRESS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple3<String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (byte[]) results.get(2).getValue());
    }

    public Tuple1<byte[]> getSendTransactionByAddressOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTIONBYADDRESS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> deletePathList(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void deletePathList(List<String> _args, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String deletePathListSeq(List<String> _args) {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(
                                _args.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        _args,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<String>> getDeletePathListInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    @Deprecated
    public static WeCrossProxy load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new WeCrossProxy(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static WeCrossProxy load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new WeCrossProxy(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static WeCrossProxy load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new WeCrossProxy(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static WeCrossProxy load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return new WeCrossProxy(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<WeCrossProxy> deploy(
            Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                WeCrossProxy.class, web3j, credentials, contractGasProvider, getBinary(), "");
    }

    public static RemoteCall<WeCrossProxy> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                WeCrossProxy.class,
                web3j,
                transactionManager,
                contractGasProvider,
                getBinary(),
                "");
    }

    @Deprecated
    public static RemoteCall<WeCrossProxy> deploy(
            Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(
                WeCrossProxy.class, web3j, credentials, gasPrice, gasLimit, getBinary(), "");
    }

    @Deprecated
    public static RemoteCall<WeCrossProxy> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return deployRemoteCall(
                WeCrossProxy.class, web3j, transactionManager, gasPrice, gasLimit, getBinary(), "");
    }
}
