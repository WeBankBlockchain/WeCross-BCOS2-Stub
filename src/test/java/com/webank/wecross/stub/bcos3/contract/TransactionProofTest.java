package com.webank.wecross.stub.bcos3.contract;

import static junit.framework.TestCase.assertEquals;
import static junit.framework.TestCase.assertTrue;

import com.webank.wecross.stub.bcos3.common.ObjectMapperFactory;
import com.webank.wecross.stub.bcos3.protocol.response.TransactionProof;
import java.io.IOException;
import java.util.Objects;
import org.fisco.bcos.sdk.v3.client.protocol.model.JsonTransactionResponse;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.junit.Test;

public class TransactionProofTest {
    @Test
    public void transactionProofTest() throws IOException {
        String transactionAndProofJson0 =
                "{\"version\":0,\"from\":\"0x9814a32a9a046d75dd2dcee6881d05604e6abc45\",\"hash\":\"0xf335ac0d3825ebf2c217530cf5f1f72e0feec9726d6c9d0542958f7de7fac898\",\"input\":\"0x608060405234801561001057600080fd5b5060408051808201909152600d8082526c48656c6c6f2c20576f726c642160981b60209092019182526100459160009161004b565b5061011f565b828054610057906100e4565b90600052602060002090601f01602090048101928261007957600085556100bf565b82601f1061009257805160ff19168380011785556100bf565b828001600101855582156100bf579182015b828111156100bf5782518255916020019190600101906100a4565b506100cb9291506100cf565b5090565b5b808211156100cb57600081556001016100d0565b600181811c908216806100f857607f821691505b6020821081141561011957634e487b7160e01b600052602260045260246000fd5b50919050565b61033d8061012e6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634ed3885e1461003b5780636d4ce63c14610050575b600080fd5b61004e6100493660046101c6565b61006e565b005b610058610085565b6040516100659190610277565b60405180910390f35b8051610081906000906020840190610117565b5050565b606060008054610094906102cc565b80601f01602080910402602001604051908101604052809291908181526020018280546100c0906102cc565b801561010d5780601f106100e25761010080835404028352916020019161010d565b820191906000526020600020905b8154815290600101906020018083116100f057829003601f168201915b5050505050905090565b828054610123906102cc565b90600052602060002090601f016020900481019282610145576000855561018b565b82601f1061015e57805160ff191683800117855561018b565b8280016001018555821561018b579182015b8281111561018b578251825591602001919060010190610170565b5061019792915061019b565b5090565b5b80821115610197576000815560010161019c565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156101d857600080fd5b813567ffffffffffffffff808211156101f057600080fd5b818401915084601f83011261020457600080fd5b813581811115610216576102166101b0565b604051601f8201601f19908116603f0116810190838211818310171561023e5761023e6101b0565b8160405282815287602084870101111561025757600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b818110156102a457858101830151858201604001528201610288565b818111156102b6576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c908216806102e057607f821691505b6020821081141561030157634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122070246eb318da9f4409cd8565ba899f14488e9aee6eaf5e2a76037436b66db5a764736f6c634300080b0033\",\"nonce\":\"83987434950947274877546050150199303696097187426377491630527731768665331412380\",\"to\":\"\",\"abi\":\"\",\"blockLimit\":1891,\"chainId\":\"chain0\",\"groupID\":\"group0\",\"transactionProof\":null,\"signature\":\"0xa841910737825a99da64237b420cb29b764e1c9086984a8212aa2a69e90a101617d6ddf6bd1910a33e555a7d093a048d065cd2517d10c4e0cc61589689e2d5dd00\"}";

        String transactionReceiptAndProofJson0 =
                "{\"transactionHash\":\"0xf335ac0d3825ebf2c217530cf5f1f72e0feec9726d6c9d0542958f7de7fac898\",\"version\":0,\"blockNumber\":1392,\"from\":\"0x9814a32a9a046d75dd2dcee6881d05604e6abc45\",\"to\":\"\",\"gasUsed\":\"24363\",\"contractAddress\":\"da39309cc503425980ec2c322fb4d87532ee3049\",\"checksumContractAddress\":null,\"logs\":[],\"status\":\"0\",\"input\":\"0x608060405234801561001057600080fd5b5060408051808201909152600d8082526c48656c6c6f2c20576f726c642160981b60209092019182526100459160009161004b565b5061011f565b828054610057906100e4565b90600052602060002090601f01602090048101928261007957600085556100bf565b82601f1061009257805160ff19168380011785556100bf565b828001600101855582156100bf579182015b828111156100bf5782518255916020019190600101906100a4565b506100cb9291506100cf565b5090565b5b808211156100cb57600081556001016100d0565b600181811c908216806100f857607f821691505b6020821081141561011957634e487b7160e01b600052602260045260246000fd5b50919050565b61033d8061012e6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634ed3885e1461003b5780636d4ce63c14610050575b600080fd5b61004e6100493660046101c6565b61006e565b005b610058610085565b6040516100659190610277565b60405180910390f35b8051610081906000906020840190610117565b5050565b606060008054610094906102cc565b80601f01602080910402602001604051908101604052809291908181526020018280546100c0906102cc565b801561010d5780601f106100e25761010080835404028352916020019161010d565b820191906000526020600020905b8154815290600101906020018083116100f057829003601f168201915b5050505050905090565b828054610123906102cc565b90600052602060002090601f016020900481019282610145576000855561018b565b82601f1061015e57805160ff191683800117855561018b565b8280016001018555821561018b579182015b8281111561018b578251825591602001919060010190610170565b5061019792915061019b565b5090565b5b80821115610197576000815560010161019c565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156101d857600080fd5b813567ffffffffffffffff808211156101f057600080fd5b818401915084601f83011261020457600080fd5b813581811115610216576102166101b0565b604051601f8201601f19908116603f0116810190838211818310171561023e5761023e6101b0565b8160405282815287602084870101111561025757600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b818110156102a457858101830151858201604001528201610288565b818111156102b6576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c908216806102e057607f821691505b6020821081141561030157634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122070246eb318da9f4409cd8565ba899f14488e9aee6eaf5e2a76037436b66db5a764736f6c634300080b0033\",\"output\":\"0x\",\"transactionProof\":null,\"receiptProof\":null"
                        + "}";

        JsonTransactionResponse transAndProof0 =
                ObjectMapperFactory.getObjectMapper()
                        .readValue(transactionAndProofJson0, JsonTransactionResponse.class);
        TransactionReceipt receiptAndProof0 =
                ObjectMapperFactory.getObjectMapper()
                        .readValue(transactionReceiptAndProofJson0, TransactionReceipt.class);
        TransactionProof transactionProof = new TransactionProof(transAndProof0, receiptAndProof0);
        assertTrue(
                Objects.nonNull(transactionProof.toString())
                        && !transactionProof.toString().isEmpty());
        assertTrue(Objects.nonNull(transactionProof.getReceiptWithProof()));
        assertEquals(
                transactionProof.getReceiptWithProof().getTransactionHash(),
                "0xf335ac0d3825ebf2c217530cf5f1f72e0feec9726d6c9d0542958f7de7fac898");
        assertTrue(Objects.nonNull(transactionProof.getTransWithProof()));
        assertEquals(
                transactionProof.getTransWithProof().getHash(),
                "0xf335ac0d3825ebf2c217530cf5f1f72e0feec9726d6c9d0542958f7de7fac898");
    }
}
